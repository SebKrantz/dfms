[{"path":"https://sebkrantz.github.io/dfms/CONTRIBUTING.html","id":"development-status","dir":"","previous_headings":"","what":"Development Status","title":"Contributing to dfms","text":"dfms stable state development, degree active subsequent development envisioned primary authors.","code":""},{"path":"https://sebkrantz.github.io/dfms/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to dfms","title":"Contributing to dfms","text":"outlines propose change dfms.","code":""},{"path":"https://sebkrantz.github.io/dfms/CONTRIBUTING.html","id":"fixing-typos","dir":"","previous_headings":"","what":"Fixing typos","title":"Contributing to dfms","text":"can fix typos, spelling mistakes, grammatical errors documentation directly using GitHub web interface, long changes made source file.","code":""},{"path":"https://sebkrantz.github.io/dfms/CONTRIBUTING.html","id":"bigger-changes","dir":"","previous_headings":"","what":"Bigger changes","title":"Contributing to dfms","text":"want make bigger change, ’s good idea first file issue. ’ve found bug, please file issue illustrates bug minimal reprex (also help write unit test, needed).","code":""},{"path":"https://sebkrantz.github.io/dfms/CONTRIBUTING.html","id":"pull-request-process","dir":"","previous_headings":"Bigger changes","what":"Pull request process","title":"Contributing to dfms","text":"Fork package clone onto computer. haven’t done , recommend using usethis::create_from_github(\"SebKrantz/dfms\", fork = TRUE). Install development dependencies devtools::install_dev_deps(), make sure package passes R CMD check running devtools::check(). R CMD check doesn’t pass cleanly, ’s good idea ask help continuing. Create Git branch pull request (PR). recommend using usethis::pr_init(\"brief-description--change\"). Make changes, commit git, create PR running usethis::pr_push(), following prompts browser. title PR briefly describe change. body PR contain Fixes #issue-number. user-facing changes, add bullet top NEWS.md (.e. just first header).","code":""},{"path":"https://sebkrantz.github.io/dfms/CONTRIBUTING.html","id":"code-style","dir":"","previous_headings":"Bigger changes","what":"Code style","title":"Contributing to dfms","text":"use roxygen2, Markdown syntax, documentation. use testthat unit tests. Contributions test cases included easier accept.","code":""},{"path":"https://sebkrantz.github.io/dfms/CONTRIBUTING.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Contributing to dfms","text":"Please note dfms project released Contributor Code Conduct. contributing project agree abide terms.","code":""},{"path":"https://sebkrantz.github.io/dfms/articles/introduction.html","id":"determining-the-structure-of-the-model","dir":"Articles","previous_headings":"","what":"Determining the Structure of the Model","title":"Introduction to dfms","text":"estimating model, ICr() function can applied determine number factors. computes 3 information criteria proposed Bai NG (2002)4, whereby second criteria generally suggests parsimonious model.  Another option use Screeplot gauge number factors looking kink plot. mathematical procedure finding kink suggested Onatski (2010)5, currently implemented ICr().  Based information criteria Screeplot, gauge model 4 factors estimated, factors, 5, 6 7 add much explanatory power model. Next number factors, lag order factor-VAR transition equation estimated (default 1 lag). can done using VARselect() function vars package, PCA factor estimates reported ICr(). selection thus suggests estimate factor model r = 4 factors p = 3 lags6. estimating model note dfms deal seasonality series, thus recommended also seasonally adjust data, e.g. using seasonal package estimation. BM14 use seasonally adjusted series, thus necessary example data provided.","code":"ic = ICr(BM14_M_diff) #> Missing values detected: imputing data with tsnarmimp() with default settings print(ic) #> Optimal Number of Factors (r) from Bai and Ng (2002) Criteria #>  #> IC1 IC2 IC3  #>   7   7  13 plot(ic) screeplot(ic) # Using vars::VARselect() with 4 principal components to estimate the VAR lag order vars::VARselect(ic$F_pca[, 1:4]) #> $selection #> AIC(n)  HQ(n)  SC(n) FPE(n)  #>      6      3      3      6  #>  #> $criteria #>                 1          2          3          4          5          6 #> AIC(n)   5.810223   5.617282   5.427760   5.389413   5.407765   5.381829 #> HQ(n)    5.898758   5.776646   5.657953   5.690434   5.779614   5.824507 #> SC(n)    6.032560   6.017490   6.005838   6.145361   6.341582   6.493517 #> FPE(n) 333.696100 275.153456 227.671078 219.144228 223.265640 217.639133 #>                 7          8          9         10 #> AIC(n)   5.409877   5.394900   5.421375   5.460761 #> HQ(n)    5.923383   5.979235   6.076538   6.186753 #> SC(n)    6.699434   6.862328   7.066673   7.283929 #> FPE(n) 223.956824 220.793226 226.933863 236.331677"},{"path":"https://sebkrantz.github.io/dfms/articles/introduction.html","id":"estimation-and-exploration","dir":"Articles","previous_headings":"","what":"Estimation and Exploration","title":"Introduction to dfms","text":"Estimation can simply done using DFM() function parameters r p7.  model can investigated using summary(), returns object class ‘dfm_summary’ containing system matrices summary statistics factors residuals measurement equation, well R-Squared factor model individual series. print method automatically adjusts amount information printed data size. large databases 40 series, series-level statistics printed. Apart model summary, dfm methods residuals() fitted() return observation residuals fitted values model. default format plain matrix, functions also argument return data original (input) format.   Another way examine factor model visually plot Quasi-Maximum-Likelihood (QML) factor estimates PCA Two-Step estimates following Doz, Giannone Reichlin (2011)8, Kalman Filter Smoother run . estimates also computed DFM() EM estimation can also visualized plot.dfm.  plot various estimates shows QML estimates volatile initial periods many missing series, less volatile latter periods. general, QML estimates may now always superior across entire data range Two-Step PCA estimates. Often, Two-Step estimates also provide similar forecasting performance, much faster estimate using DFM(BM14_M_diff, r = 4, p = 3, em.method = \"none\"). factor estimates can extracted data frame using .data.frame(), also provides various options regarding estimates retained format frame. also possible add time variable original data (default sequence integers).","code":"# Estimating the model with 4 factors and 3 lags using BM14's EM algorithm model1 = DFM(BM14_M_diff, r = 4, p = 3) #> Converged after 26 iterations. print(model1) #> Dynamic Factor Model: n = 92, T = 356, r = 4, p = 3, %NA = 25.8366 #>  #> Factor Transition Matrix [A] #>      L1.f1   L1.f2   L1.f3   L1.f4   L2.f1   L2.f2   L2.f3   L2.f4   L3.f1 #> f1  0.4720 -0.1297  0.8460  0.2098 -0.0733 -0.1436 -0.0595  0.1565  0.2356 #> f2 -0.1612  0.1699  0.2389  0.1598  0.0641 -0.1341 -0.0542  0.1287  0.1336 #> f3  0.3965  0.3264  0.0213 -0.3033 -0.1542 -0.0467 -0.1484 -0.0150 -0.1172 #> f4  0.1096  0.1601 -0.1578  0.2485 -0.0365 -0.0563 -0.0230 -0.1117 -0.0719 #>      L3.f2   L3.f3   L3.f4 #> f1 -0.0803 -0.0386  0.0408 #> f2  0.1347 -0.0024 -0.0342 #> f3 -0.0087  0.1767  0.0249 #> f4  0.0307  0.0662 -0.0035 plot(model1) dfm_summary <- summary(model1) print(dfm_summary) # Large model with > 40 series: defaults to compact = 2 #> Mixed Frequency Dynamic Factor Model #> n = 92, nm = 92, nq = 0, T = 356, r = 4, p = 3 #> %NA = 25.8366, %NAm = NA #>  #> Call:  DFM(X = BM14_M_diff, r = 4, p = 3) #>  #> Summary Statistics of Factors [F] #>       N     Mean   Median      SD       Min      Max #> f1  356  -0.0448   0.3455  4.4505  -21.9265  11.0306 #> f2  356  -0.0319  -0.0892    2.68   -9.9549   7.4988 #> f3  356  -0.1032  -0.0593  3.2891  -12.0969  16.2455 #> f4  356  -0.0118    0.089   2.161   -8.2883  10.7219 #>  #> Factor Transition Matrix [A] #>      L1.f1   L1.f2    L1.f3   L1.f4    L2.f1    L2.f2    L2.f3    L2.f4   L3.f1 #> f1  0.4720 -0.1297  0.84605  0.2098 -0.07334 -0.14356 -0.05950  0.15645  0.2356 #> f2 -0.1612  0.1699  0.23889  0.1598  0.06406 -0.13413 -0.05415  0.12869  0.1336 #> f3  0.3965  0.3264  0.02128 -0.3033 -0.15424 -0.04669 -0.14839 -0.01495 -0.1172 #> f4  0.1096  0.1601 -0.15776  0.2485 -0.03655 -0.05626 -0.02304 -0.11169 -0.0719 #>        L3.f2     L3.f3     L3.f4 #> f1 -0.080320 -0.038592  0.040812 #> f2  0.134692 -0.002391 -0.034215 #> f3 -0.008694  0.176663  0.024876 #> f4  0.030716  0.066201 -0.003465 #>  #> Factor Covariance Matrix [cov(F)] #>           f1        f2        f3        f4 #> f1  19.8067    2.0846*  -3.4700*  -2.1094* #> f2   2.0846*   7.1822   -2.8725*  -1.0631* #> f3  -3.4700*  -2.8725*  10.8182    1.9286* #> f4  -2.1094*  -1.0631*   1.9286*   4.6701  #>  #> Factor Transition Error Covariance Matrix [Q] #>         u1      u2      u3      u4 #> u1  9.0178  0.3303 -3.0764 -1.0182 #> u2  0.3303  5.4425 -1.3095 -0.5051 #> u3 -3.0764 -1.3095  7.0230  0.8639 #> u4 -1.0182 -0.5051  0.8639  3.8005 #>  #> Summary of Residual AR(1) Serial Correlations #>    N     Mean   Median      SD      Min     Max #>   92  -0.0409  -0.0782  0.2959  -0.5073  0.6858 #>  #> Summary of Individual R-Squared's #>    N    Mean  Median      SD     Min     Max #>   92  0.3712   0.299  0.2888  0.0067  0.9978  # Can request more detailed printouts # print(dfm_summary, compact = 1) # print(dfm_summary, compact = 0) plot(resid(model1, orig.format = TRUE)) plot(fitted(model1, orig.format = TRUE)) plot(model1, method = \"all\", type = \"individual\") # Default: all estimates in long format head(as.data.frame(model1, time = index(BM14_M_diff))) #>   Method Factor       Time      Value #> 1    PCA     f1 1980-02-29  1.1503013 #> 2    PCA     f1 1980-03-31  0.3374613 #> 3    PCA     f1 1980-04-30 -1.4905337 #> 4    PCA     f1 1980-05-31 -1.5360036 #> 5    PCA     f1 1980-06-30 -0.2828433 #> 6    PCA     f1 1980-07-31  0.3385403"},{"path":"https://sebkrantz.github.io/dfms/articles/introduction.html","id":"forecasting","dir":"Articles","previous_headings":"","what":"Forecasting","title":"Introduction to dfms","text":"DFM forecasts can obtained predict() method, dynamically forecasts factors using transition equation (default 10 periods), also predicts data forecasts using observation equation. Objects class ‘dfm_forecast’ forecasts can also visualized using plot method. default entire series history plotted along forecasts, thus often helpful restrict plot range. stationary autoregressive model, forecasts tend zero quite quickly9.  forecasts can also retrieved data frame using .data.frame(). method various arguments control forecasts retained (factors, data , default factors), format frame.","code":"# 12-period ahead DFM forecast fc = predict(model1, h = 12) print(fc) #> 12 Step Ahead Forecast from Dynamic Factor Model #>  #> Factor Forecasts #>        f1     f2      f3      f4 #> 1  3.4698 1.7276  0.2706 -0.9064 #> 2  2.4379 0.0305  1.3119 -0.0097 #> 3  1.6576 0.3182  0.7247  0.1037 #> 4  1.7445 0.7829 -0.2230 -0.1513 #> 5  0.8281 0.1390  0.5545  0.1199 #> 6  0.9576 0.3001  0.0126 -0.0923 #> 7  0.6599 0.2489  0.0333 -0.0518 #> 8  0.3354 0.0681  0.1999  0.0332 #> 9  0.4286 0.1824 -0.0830 -0.0672 #> 10 0.1853 0.0605  0.0882  0.0107 #> 11 0.1605 0.0544  0.0268 -0.0067 #> 12 0.1509 0.0734 -0.0288 -0.0235 #>  #> Series Forecasts #>    ip_total ip_tot_cstr ip_tot_cstr_en ip_constr ip_im_goods ip_capital #>    ip_d_cstr ip_nd_cons   ip_en ip_en_2 ip_manuf ip_metals ip_chemicals #>    ip_electric ip_machinery ip_paper ip_plastic new_cars orders #>    ret_turnover_defl ecs_ec_sent_ind ecs_ind_conf ecs_ind_order_book #>    ecs_ind_stocks ecs_ind_prod_exp ecs_ind_prod_rec_m ecs_ind_x_orders #>    ecs_ind_empl_exp ecs_cons_conf ecs_cons_sit_over_next_12 ecs_cons_exp_unempl #>    ecs_cons_gen_last_12m ecs_cstr_conf ecs_cstr_order_books ecs_cstr_empl_exp #>    ecs_cstr_prod_recent ecs_ret_tr_conf ecs_ret_tr_bus_sit ecs_ret_tr_stocks #>    ecs_ret_tr_exp_bus ecs_ret_tr_empl ecs_serv_conf ecs_serv_empl_exp #>    pms_comp_output pms_comp_empl pms_pmi pms_manuf_empl pms_manuf_output #>    pms_manuf_product pms_serv_out pms_serv_empl pms_serv_new_bus #>    pms_serv_product     urx empl_total empl_tot_xc empl_cstr empl_manuf #>    extra_ea_trade_exp_val intra_ea_trade_exp_val extra_ea_trade_imp_val #>    intra_ea_trade_imp_val  us_ip  us_urx us_empl us_retail_sales #>    us_ip_manuf_exp us_cons_exp us_r3_m us_r10_year      m3   loans ir_long #>    ir_short ir_1_year ir_2_year ir_5_year    eer eer_cpi eer_ppi exr_usd #>    exr_gbp rxr_yen euro50 euro325  sp500  dow_j raw_mat_en raw_mat_oil #>    raw_mat_gold raw_mat_oil_fwd raw_mat #>  [ reached getOption(\"max.print\") -- omitted 12 rows ] # Setting an appropriate plot range to see the forecast plot(fc, xlim = c(320, 370)) # Predicting with Two-Step estimates # plot(predict(model1, h = 12, method = \"2s\"), xlim = c(320, 370)) # Factor forecasts in wide format head(as.data.frame(fc, pivot = \"wide\")) #>   Time Forecast         f1         f2         f3          f4 #> 1    1    FALSE   4.207651 -1.6552707  3.2190834 -1.82663141 #> 2    2    FALSE  -3.656458 -6.6178403 -3.9121446 -0.05762001 #> 3    3    FALSE -14.486337 -0.6573393 -6.8663850  1.69525122 #> 4    4    FALSE -14.794458  3.1573790 -6.4820328  1.70916785 #> 5    5    FALSE  -8.191696  0.5563773 -0.1840816  0.98407541 #> 6    6    FALSE  -1.357927 -0.3805697  3.5068964 -0.05346754"},{"path":"https://sebkrantz.github.io/dfms/articles/introduction.html","id":"estimation-with-mixed-frequency","dir":"Articles","previous_headings":"","what":"Estimation with Mixed Frequency","title":"Introduction to dfms","text":"dfms currently provides specific adjustments data different frequencies. algorithm accommodates monthly quarterly series planned summer 2023. meantime, users may choose block data (creating multiple quarterly series monthly series, duplicating quarterly series maintain equal representation).","code":""},{"path":"https://sebkrantz.github.io/dfms/articles/introduction.html","id":"additional-functions","dir":"Articles","previous_headings":"","what":"Additional Functions","title":"Introduction to dfms","text":"dfms also exports central functions help DFM estimation, imputing missing values tsnarmimp(), estimating VAR .VAR(), Kalman Filtering Smoothing SKFS(), separately SKF() followed FIS(). knowledge fastest routines simple stationary Kalman Filtering Smoothing currently available R. function em_converged() can used check convergence log-likelihood EM estimation. dfms also exports matrix inverse pseudo-inverse Armadillo C++ library functions ainv() apinv(). often faster solve(), somewhat robust near-singularity cases.","code":""},{"path":"https://sebkrantz.github.io/dfms/articles/introduction.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Introduction to dfms","text":"Doz, C., Giannone, D., & Reichlin, L. (2011). two-step estimator large approximate dynamic factor models based Kalman filtering. Journal Econometrics, 164(1), 188-205. Doz, C., Giannone, D., & Reichlin, L. (2012). quasi-maximum likelihood approach large, approximate dynamic factor models. Review Economics Statistics, 94(4), 1014-1024. Banbura, M., & Modugno, M. (2014). Maximum likelihood estimation factor models datasets arbitrary pattern missing data. Journal Applied Econometrics, 29(1), 133-160. Mariano, R. S., & Murasawa, Y. (2003). new coincident index business cycles based monthly quarterly series. Journal Applied Econometrics, 18(4), 427-443. Bai, J., Ng, S. (2002). Determining Number Factors Approximate Factor Models. Econometrica, 70(1), 191-221. Onatski, . (2010). Determining number factors empirical distribution eigenvalues. Review Economics Statistics, 92(4), 1004-1016. Stock, J. H., & Watson, M. W. (2016). Dynamic Factor Models, Factor-Augmented Vector Autoregressions, Structural Vector Autoregressions Macroeconomics. Handbook Macroeconomics, 2, 415–525.","code":""},{"path":"https://sebkrantz.github.io/dfms/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Sebastian Krantz. Author, maintainer. Rytis Bagdziunas. Author.","code":""},{"path":"https://sebkrantz.github.io/dfms/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Krantz S, Bagdziunas R (2025). dfms: Dynamic Factor Models. R package version 0.3.0, https://sebkrantz.github.io/dfms/.","code":"@Manual{,   title = {dfms: Dynamic Factor Models},   author = {Sebastian Krantz and Rytis Bagdziunas},   year = {2025},   note = {R package version 0.3.0},   url = {https://sebkrantz.github.io/dfms/}, }"},{"path":"https://sebkrantz.github.io/dfms/index.html","id":"dfms-dynamic-factor-models-for-r","dir":"","previous_headings":"","what":"Dynamic Factor Models for R","title":"Dynamic Factor Models for R","text":"dfms provides efficient estimation Dynamic Factor Models via EM Algorithm. Estimation can done 3 different ways following: Doz, C., Giannone, D., & Reichlin, L. (2011). two-step estimator large approximate dynamic factor models based Kalman filtering. Journal Econometrics, 164(1), 188-205. doi:10.1016/j.jeconom.2011.02.012 Doz, C., Giannone, D., & Reichlin, L. (2012). quasi-maximum likelihood approach large, approximate dynamic factor models. Review Economics Statistics, 94(4), 1014-1024. doi:10.1162/REST_a_00225 Banbura, M., & Modugno, M. (2014). Maximum likelihood estimation factor models datasets arbitrary pattern missing data. Journal Applied Econometrics, 29(1), 133-160. doi:10.1002/jae.2306 default em.method = \"auto\", chooses \"BM\" following Banbura & Modugno (2014) missing data mixed frequency, \"DGR\" following Doz, Giannone & Reichlin (2012) otherwise. Using em.method = \"none\" generates Two-Step estimates following Doz, Giannone & Reichlin (2011). extremely efficient bigger datasets. PCA Two-Step estimates also reported EM-based methods. methods support missing data, em.method = \"DGR\" account EM iterations.","code":""},{"path":"https://sebkrantz.github.io/dfms/index.html","id":"comparison-with-other-r-packages","dir":"","previous_headings":"","what":"Comparison with Other R Packages","title":"Dynamic Factor Models for R","text":"dfms intended provide simple, numerically robust, computationally efficient baseline implementation (linear Gaussian) Dynamic Factor Models R, allowing straightforward application various contexts time series dimensionality reduction forecasting. implementation based efficient C++ code, making dfms orders magnitude faster packages can used fit dynamic factor models MARSS, nowcasting nowcastDFM geared mixed-frequency nowcasting applications - supporting blocking variables different groups factors estimated evaluation news content. large-scale nowcasting models DynamicFactorMQ class statsmodels Python library probably robust implementation - see example Chad Fulton.  dfms package intended fit general forms state space model like MARSS.","code":""},{"path":"https://sebkrantz.github.io/dfms/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Dynamic Factor Models for R","text":"","code":"# CRAN install.packages(\"dfms\")  # Development Version install.packages('dfms', repos = c('https://sebkrantz.r-universe.dev', 'https://cloud.r-project.org'))"},{"path":"https://sebkrantz.github.io/dfms/index.html","id":"usage-example","dir":"","previous_headings":"","what":"Usage Example","title":"Dynamic Factor Models for R","text":"","code":"library(dfms)  # Fit DFM with 6 factors and 3 lags in the transition equation mod = DFM(diff(BM14_M), r = 6, p = 3)   # 'dfm' methods summary(mod) plot(mod) as.data.frame(mod)  # Forecasting 20 periods ahead fc = predict(mod, h = 20)  # 'dfm_forecast' methods print(fc) plot(fc) as.data.frame(fc)"},{"path":"https://sebkrantz.github.io/dfms/reference/BM14_Models.html","id":null,"dir":"Reference","previous_headings":"","what":"Euro Area Macroeconomic Data from Banbura and Modugno 2014 — BM14_Models","title":"Euro Area Macroeconomic Data from Banbura and Modugno 2014 — BM14_Models","text":"data extract BM 2014 replication files. proprietary series (mostly PMI's) excluded. dataset BM14_Models provides information series inclusion 'small', 'medium' 'large' sized dynamic factor models estimated BM 2014. actual data contained xts format BM14_M monthly data BM14_Q quarterly data.","code":""},{"path":"https://sebkrantz.github.io/dfms/reference/BM14_Models.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Euro Area Macroeconomic Data from Banbura and Modugno 2014 — BM14_Models","text":"","code":"BM14_Models BM14_M BM14_Q"},{"path":"https://sebkrantz.github.io/dfms/reference/BM14_Models.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Euro Area Macroeconomic Data from Banbura and Modugno 2014 — BM14_Models","text":"BM14_Models data frame 101 obs. (series) 8 columns: series BM14 series code (converted snake case R) label BM14 series label code original series code data source freq series frequency log_trans logical indicating whether series transformed natural log differencing. Note data provided untransformed levels, data (log-)differenced BM14 estimation. small logical indicating series included 'small' model BM14. Proprietary series excluded. medium logical indicating series included 'medium' model BM14. Proprietary series excluded. large logical indicating series included 'large' model BM14. comprises series, thus variable redundant included completeness. Proprietary series excluded.","code":""},{"path":"https://sebkrantz.github.io/dfms/reference/BM14_Models.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Euro Area Macroeconomic Data from Banbura and Modugno 2014 — BM14_Models","text":"Banbura, M., & Modugno, M. (2014). Maximum likelihood estimation factor models datasets arbitrary pattern missing data. Journal Applied Econometrics, 29(1), 133-160.","code":""},{"path":"https://sebkrantz.github.io/dfms/reference/BM14_Models.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Euro Area Macroeconomic Data from Banbura and Modugno 2014 — BM14_Models","text":"","code":"library(magrittr) library(xts) #> Loading required package: zoo #>  #> Attaching package: ‘zoo’ #> The following objects are masked from ‘package:base’: #>  #>     as.Date, as.Date.numeric  # Constructing the database for the large model BM14 = merge(BM14_M, BM14_Q) BM14[, BM14_Models$log_trans] %<>% log() BM14[, BM14_Models$freq == \"M\"] %<>% diff() BM14[, BM14_Models$freq == \"Q\"] %<>% diff(3)  # Small Model Database head(BM14[, BM14_Models$small]) #>            ip_tot_cstr new_cars orders ret_turnover_defl ecs_ec_sent_ind #> 1980-01-31          NA       NA     NA                NA              NA #> 1980-02-29          NA       NA     NA      -0.045867752              NA #> 1980-03-31          NA       NA     NA       0.025129863              NA #> 1980-04-30          NA       NA     NA      -0.014409195              NA #> 1980-05-31          NA       NA     NA      -0.002828186              NA #> 1980-06-30          NA       NA     NA      -0.007937021              NA #>            pms_pmi urx extra_ea_trade_exp_val euro325      raw_mat          gdp #> 1980-01-31      NA  NA                     NA      NA           NA           NA #> 1980-02-29      NA  NA           -0.006628411      NA -0.017094433           NA #> 1980-03-31      NA  NA           -0.010029199      NA  0.041649238           NA #> 1980-04-30      NA  NA           -0.009230433      NA  0.007688121           NA #> 1980-05-31      NA  NA           -0.009886927      NA -0.035638515           NA #> 1980-06-30      NA  NA           -0.030326833      NA -0.031090587 -0.004706623 #>                    empl capacity      gdp_us #> 1980-01-31           NA       NA          NA #> 1980-02-29           NA       NA          NA #> 1980-03-31           NA       NA          NA #> 1980-04-30           NA       NA          NA #> 1980-05-31           NA       NA          NA #> 1980-06-30 0.0005918654       NA -0.02070885  # Medium-Sized Model Database head(BM14[, BM14_Models$medium]) #>            ip_tot_cstr ip_constr ip_im_goods ip_capital ip_d_cstr ip_nd_cons #> 1980-01-31          NA        NA          NA         NA        NA         NA #> 1980-02-29          NA        NA          NA         NA        NA         NA #> 1980-03-31          NA        NA          NA         NA        NA         NA #> 1980-04-30          NA        NA          NA         NA        NA         NA #> 1980-05-31          NA        NA          NA         NA        NA         NA #> 1980-06-30          NA        NA          NA         NA        NA         NA #>            ip_en new_cars orders ret_turnover_defl ecs_ec_sent_ind ecs_ind_conf #> 1980-01-31    NA       NA     NA                NA              NA           NA #> 1980-02-29    NA       NA     NA      -0.045867752              NA           NA #> 1980-03-31    NA       NA     NA       0.025129863              NA           NA #> 1980-04-30    NA       NA     NA      -0.014409195              NA           NA #> 1980-05-31    NA       NA     NA      -0.002828186              NA           NA #> 1980-06-30    NA       NA     NA      -0.007937021              NA           NA #>            ecs_ind_prod_exp ecs_ind_x_orders ecs_ind_empl_exp ecs_cons_conf #> 1980-01-31               NA               NA               NA            NA #> 1980-02-29               NA               NA               NA            NA #> 1980-03-31               NA               NA               NA            NA #> 1980-04-30               NA               NA               NA            NA #> 1980-05-31               NA               NA               NA            NA #> 1980-06-30               NA               NA               NA            NA #>            ecs_cstr_conf ecs_ret_tr_conf ecs_serv_conf ecs_serv_empl_exp #> 1980-01-31            NA              NA            NA                NA #> 1980-02-29            NA              NA            NA                NA #> 1980-03-31            NA              NA            NA                NA #> 1980-04-30            NA              NA            NA                NA #> 1980-05-31            NA              NA            NA                NA #> 1980-06-30            NA              NA            NA                NA #>            pms_pmi pms_serv_out urx empl_total extra_ea_trade_exp_val #> 1980-01-31      NA           NA  NA         NA                     NA #> 1980-02-29      NA           NA  NA         NA           -0.006628411 #> 1980-03-31      NA           NA  NA         NA           -0.010029199 #> 1980-04-30      NA           NA  NA         NA           -0.009230433 #> 1980-05-31      NA           NA  NA         NA           -0.009886927 #> 1980-06-30      NA           NA  NA         NA           -0.030326833 #>            extra_ea_trade_imp_val         us_ip us_ip_manuf_exp us_cons_exp #> 1980-01-31                     NA            NA              NA          NA #> 1980-02-29            0.033595314  0.0008954556              10         0.8 #> 1980-03-31            0.113723637 -0.0029476935              -2       -10.6 #> 1980-04-30           -0.096103676 -0.0203344816             -22         0.1 #> 1980-05-31            0.044716794 -0.0254443045             -24         0.9 #> 1980-06-30           -0.003696892 -0.0125115289               4         7.7 #>                     m3 loans ir_long ir_short eer     exr_usd euro325 #> 1980-01-31          NA    NA      NA       NA  NA          NA      NA #> 1980-02-29 0.007535875    NA      NA       NA  NA -0.01314636      NA #> 1980-03-31 0.010894232    NA      NA       NA  NA -0.07252762      NA #> 1980-04-30 0.004549395    NA      NA       NA  NA -0.01100038      NA #> 1980-05-31 0.007720339    NA      NA       NA  NA  0.05541221      NA #> 1980-06-30 0.007523561    NA      NA       NA  NA  0.02075198      NA #>                  dow_j  raw_mat_en raw_mat_oil_fwd          gdp  priv_cons #> 1980-01-31          NA          NA              NA           NA         NA #> 1980-02-29  0.02009644  0.03875620              NA           NA         NA #> 1980-03-31 -0.08884307  0.01467532              NA           NA         NA #> 1980-04-30 -0.02167110 -0.02849797              NA           NA         NA #> 1980-05-31  0.05186822 -0.03043713              NA           NA         NA #> 1980-06-30  0.04908563 -0.03595893              NA -0.004706623 -0.0061348 #>                 invest      export      import         empl prductivity #> 1980-01-31          NA          NA          NA           NA          NA #> 1980-02-29          NA          NA          NA           NA          NA #> 1980-03-31          NA          NA          NA           NA          NA #> 1980-04-30          NA          NA          NA           NA          NA #> 1980-05-31          NA          NA          NA           NA          NA #> 1980-06-30 -0.01693449 -0.04461216 -0.02727455 0.0005918654          NA #>            capacity      gdp_us #> 1980-01-31       NA          NA #> 1980-02-29       NA          NA #> 1980-03-31       NA          NA #> 1980-04-30       NA          NA #> 1980-05-31       NA          NA #> 1980-06-30       NA -0.02070885"},{"path":"https://sebkrantz.github.io/dfms/reference/DFM.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate a Dynamic Factor Model — DFM","title":"Estimate a Dynamic Factor Model — DFM","text":"Efficient estimation Dynamic Factor Model via EM Algorithm - stationary data time-invariant system matrices classical assumptions, permitting missing data.","code":""},{"path":"https://sebkrantz.github.io/dfms/reference/DFM.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate a Dynamic Factor Model — DFM","text":"","code":"DFM(   X,   r,   p = 1L,   ...,   idio.ar1 = FALSE,   quarterly.vars = NULL,   rQ = c(\"none\", \"diagonal\", \"identity\"),   rR = c(\"diagonal\", \"identity\", \"none\"),   em.method = c(\"auto\", \"DGR\", \"BM\", \"none\"),   min.iter = 25L,   max.iter = 100L,   tol = 1e-04,   pos.corr = TRUE,   check.increased = FALSE )"},{"path":"https://sebkrantz.github.io/dfms/reference/DFM.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate a Dynamic Factor Model — DFM","text":"X T x n numeric data matrix frame stationary time series. May contain missing values. r integer. number factors. p integer. number lags factor VAR. ... (optional) arguments tsnarmimp. idio.ar1 logical. Model observation errors AR(1) processes: \\(e_t = \\rho e_{t-1} + v_t\\). Note substantially increases computation time, generaly needed n large (>30). See theoretical vignette details. quarterly.vars character. Names quarterly variables X (). Monthly variables left quarterly variables data matrix quarterly observations provided every 3rd period. rQ character. restrictions state (transition) covariance matrix (Q). rR character. restrictions observation (measurement) covariance matrix (R). em.method character. implementation Expectation Maximization Algorithm used. options : min.iter integer. Minimum number EM iterations (ensure convergence path). max.iter integer. Maximum number EM iterations. tol numeric. EM convergence tolerance. pos.corr logical. Increase likelihood factors correlate positively data, scaling eigenvectors principal components (used initialize Kalman Filter) co-vary positively row-means standardized data. check.increased logical. Check likelihood increased. Passed em_converged. TRUE, algorithm terminates convergence reached decreasing likelihood.","code":""},{"path":"https://sebkrantz.github.io/dfms/reference/DFM.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate a Dynamic Factor Model — DFM","text":"list-like object class 'dfm' following elements: X_imp \\(T \\times n\\) matrix imputed standardized (scaled centered) data - attributes attached allowing reconstruction original data: eigen eigen(cov(X_imp)). F_pca \\(T \\times r\\) matrix principal component factor estimates - X_imp %*% eigen$vectors. P_0 \\(r \\times r\\) initial factor covariance matrix estimate based PCA results. F_2s \\(T \\times r\\) matrix two-step factor estimates Doz, Giannone Reichlin (2011) - obtained running data Kalman Filter Smoother , Filter initialized results PCA. P_2s \\(r \\times r \\times T\\) covariance matrices two-step factor estimates. F_qml \\(T \\times r\\) matrix quasi-maximum likelihood factor estimates - obtained iteratively Kalman Filtering Smoothing factor estimates EM convergence. P_qml \\(r \\times r \\times T\\) covariance matrices QML factor estimates. \\(r \\times rp\\) factor transition matrix. C \\(n \\times r\\) observation matrix. Q \\(r \\times r\\) state (error) covariance matrix. R \\(n \\times n\\) observation (error) covariance matrix. e \\(T \\times n\\) estimates observation errors \\(\\textbf{e}_t\\). available idio.ar1 = TRUE. rho \\(n \\times 1\\) estimates AR(1) coefficients (\\(\\rho\\)) observation errors: \\(e_t = \\rho e_{t-1} + v_t\\). available idio.ar1 = TRUE. loglik vector log-likelihoods - one EM iteration. final value corresponds log-likelihood reported model. tol numeric convergence tolerance used. converged single logical valued indicating whether EM algorithm converged (within max.iter iterations subject tol). anyNA single logical valued indicating whether (internal) missing values data (determined removal rows many missing values). FALSE, X_imp simply original data matrix form, \"missing\" attribute attached. rm.rows vector cases (rows) removed beforehand (subject max.missing na.rm.method). cases removed slot NULL. em.method EM method used. call call object obtained match.call().","code":""},{"path":"https://sebkrantz.github.io/dfms/reference/DFM.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Estimate a Dynamic Factor Model — DFM","text":"function efficiently estimates Dynamic Factor Model following classical assumptions: Linearity Idiosynchratic measurement (observation) errors (R diagonal) direct relationship series lagged factors (ceteris paribus contemporaneous factors) relationship lagged error terms either measurement transition equation (serial correlation), unless explicitly modeled AR(1) processes using idio.ar1 = TRUE. Factors allowed evolve \\(VAR(p)\\) process, data internally standardized (scaled centered) estimation (removing need intercept terms). assumptions 1-4, translates following dynamic form: $$\\textbf{x}_t = \\textbf{C}_0 \\textbf{f}_t + \\textbf{e}_t \\ \\sim\\  N(\\textbf{0}, \\textbf{R})$$ $$\\textbf{f}_t = \\sum_{j=1}^p \\textbf{}_j \\textbf{f}_{t-j} + \\textbf{u}_t \\ \\sim\\  N(\\textbf{0}, \\textbf{Q}_0)$$ first equation called measurement observation equation second equation called transition, state process equation, model can estimated using classical form Kalman Filter Expectation Maximization (EM) algorithm, transforming State-Space (stacked, VAR(1)) form: $$\\textbf{x}_t = \\textbf{C} \\textbf{F}_t + \\textbf{e}_t \\ \\sim\\  N(\\textbf{0}, \\textbf{R})$$ $$\\textbf{F}_t = \\textbf{F}_{t-1} + \\textbf{u}_t \\ \\sim\\  N(\\textbf{0}, \\textbf{Q})$$ ","code":""},{"path":"https://sebkrantz.github.io/dfms/reference/DFM.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Estimate a Dynamic Factor Model — DFM","text":"Doz, C., Giannone, D., & Reichlin, L. (2011). two-step estimator large approximate dynamic factor models based Kalman filtering. Journal Econometrics, 164(1), 188-205. Doz, C., Giannone, D., & Reichlin, L. (2012). quasi-maximum likelihood approach large, approximate dynamic factor models. Review Economics Statistics, 94(4), 1014-1024. Banbura, M., & Modugno, M. (2014). Maximum likelihood estimation factor models datasets arbitrary pattern missing data. Journal Applied Econometrics, 29(1), 133-160. Stock, J. H., & Watson, M. W. (2016). Dynamic Factor Models, Factor-Augmented Vector Autoregressions, Structural Vector Autoregressions Macroeconomics. Handbook Macroeconomics, 2, 415–525. https://doi.org/10.1016/bs.hesmac.2016.04.002","code":""},{"path":"https://sebkrantz.github.io/dfms/reference/DFM.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate a Dynamic Factor Model — DFM","text":"","code":"library(magrittr) library(xts) library(vars) #> Loading required package: MASS #> Loading required package: strucchange #> Loading required package: sandwich #> Loading required package: urca #> Loading required package: lmtest  # BM14 Replication Data. Constructing the database: BM14 = merge(BM14_M, BM14_Q) BM14[, BM14_Models$log_trans] %<>% log() BM14[, BM14_Models$freq == \"M\"] %<>% diff() BM14[, BM14_Models$freq == \"Q\"] %<>% diff(3)   ### Small Model ---------------------------------------  # IC for number of factors IC_small = ICr(BM14[, BM14_Models$small], max.r = 5) #> Missing values detected: imputing data with tsnarmimp() with default settings plot(IC_small)  screeplot(IC_small)   # I take 2 factors. Now number of lags VARselect(IC_small$F_pca[, 1:2]) #> $selection #> AIC(n)  HQ(n)  SC(n) FPE(n)  #>      6      5      2      6  #>  #> $criteria #>                 1          2         3          4         5          6 #> AIC(n) -1.5028163 -1.7020957 -1.701093 -1.7021266 -1.782692 -1.7977899 #> HQ(n)  -1.4762557 -1.6578279 -1.639118 -1.6224446 -1.685303 -1.6826936 #> SC(n)  -1.4361151 -1.5909270 -1.545457 -1.5020229 -1.538121 -1.5087511 #> FPE(n)  0.2225028  0.1823018  0.182486  0.1822997  0.168192  0.1656763 #>                 7          8          9         10 #> AIC(n) -1.7892503 -1.7887748 -1.7793434 -1.7708400 #> HQ(n)  -1.6564469 -1.6382643 -1.6111258 -1.5849153 #> SC(n)  -1.4557440 -1.4108011 -1.3569022 -1.3039313 #> FPE(n)  0.1671036  0.1671913  0.1687862  0.1702408 #>   # Estimating the model with 2 factors and 3 lags dfm_small = DFM(BM14[, BM14_Models$small], 2, 3) #> Converged after 26 iterations.  # Inspecting the model summary(dfm_small) #> Mixed Frequency Dynamic Factor Model #> n = 14, nm = 14, nq = 0, T = 356, r = 2, p = 3 #> %NA = 38.3628, %NAm = NA #>  #> Call:  DFM(X = BM14[, BM14_Models$small], r = 2, p = 3) #>  #> Summary Statistics of Factors [F] #>       N     Mean   Median      SD      Min     Max #> f1  356  -0.0777   0.1544  2.0324  -8.9693  3.2519 #> f2  356   0.0468  -0.0279  1.3933  -4.2683  5.8201 #>  #> Factor Transition Matrix [A] #>     L1.f1   L1.f2    L2.f1   L2.f2   L3.f1    L3.f2 #> f1 1.2107 -0.1290 -0.06743  0.1059 -0.2065 0.008175 #> f2 0.3656  0.4819  0.10274 -0.2022 -0.6789 0.391439 #>  #> Factor Covariance Matrix [cov(F)] #>           f1        f2 #> f1   4.1307   -0.4890* #> f2  -0.4890*   1.9412  #>  #> Factor Transition Error Covariance Matrix [Q] #>        u1     u2 #> u1 0.2845 0.2434 #> u2 0.2434 0.4387 #>  #> Observation Matrix [C] #>                             f1      f2 #> ip_tot_cstr             0.2450  0.1850 #> new_cars                0.0245  0.0323 #> orders                  0.1669  0.1692 #> ret_turnover_defl       0.0493 -0.0062 #> ecs_ec_sent_ind         0.2450  0.4559 #> pms_pmi                 0.1196  0.4508 #> urx                    -0.3830  0.1478 #> extra_ea_trade_exp_val  0.0568  0.0847 #> euro325                 0.1207  0.2317 #> raw_mat                 0.0968  0.1707 #> gdp                     0.3666  0.0236 #> empl                    0.3661 -0.2945 #> capacity                0.2730 -0.1416 #> gdp_us                  0.2194  0.1953 #>  #> Observation Error Covariance Matrix [diag(R) - Restricted] #>            ip_tot_cstr               new_cars                 orders  #>                 0.6374                 0.9906                 0.7938  #>      ret_turnover_defl        ecs_ec_sent_ind                pms_pmi  #>                 0.9863                 0.3405                 0.3814  #>                    urx extra_ea_trade_exp_val                euro325  #>                 0.1861                 0.9708                 0.8215  #>                raw_mat                    gdp                   empl  #>                 0.9028                 0.4079                 0.1488  #>               capacity                 gdp_us  #>                 0.5644                 0.7362  #>  #> Observation Residual Covariance Matrix [cov(resid(DFM))] #>                        ip_tot_cstr  new_cars    orders ret_turnover_defl #> ip_tot_cstr                0.6126   -0.0151    0.1996*          -0.0168  #> new_cars                  -0.0151    0.9943   -0.0077            0.1269* #> orders                     0.1996*  -0.0077    0.7827            0.0342  #> ret_turnover_defl         -0.0168    0.1269*   0.0342            0.9885  #> ecs_ec_sent_ind           -0.0074   -0.0312   -0.0863*          -0.0018  #> pms_pmi                   -0.0591   -0.0482   -0.0184            0.0068  #> urx                        0.0104   -0.0190    0.0524           -0.0095  #> extra_ea_trade_exp_val     0.0737    0.0962    0.0760           -0.0145  #> euro325                   -0.0294    0.0543   -0.0896            0.0140  #> raw_mat                    0.0936    0.1054    0.0054            0.0392  #> gdp                       -0.0178   -0.0432   -0.0163            0.0624  #> empl                      -0.0335   -0.0505    0.0229            0.0005  #> capacity                  -0.0503   -0.0134   -0.0238           -0.0375  #> gdp_us                    -0.1565*   0.0034   -0.0046           -0.0659  #>                        ecs_ec_sent_ind   pms_pmi       urx #> ip_tot_cstr                   -0.0074   -0.0591    0.0104  #> new_cars                      -0.0312   -0.0482   -0.0190  #> orders                        -0.0863*  -0.0184    0.0524  #> ret_turnover_defl             -0.0018    0.0068   -0.0095  #> ecs_ec_sent_ind                0.2537   -0.0718*   0.0030  #> pms_pmi                       -0.0718*   0.3167    0.0291  #> urx                            0.0030    0.0291    0.1653  #> extra_ea_trade_exp_val        -0.0657*  -0.0426    0.0045  #> euro325                       -0.0290   -0.0365    0.0002  #> raw_mat                       -0.0451    0.0409    0.0336  #> gdp                           -0.0813*  -0.0211   -0.0020  #> empl                           0.0453*   0.0421    0.0066  #> capacity                      -0.0567   -0.0113    0.0380  #> gdp_us                        -0.1000*  -0.0293    0.0423  #>                        extra_ea_trade_exp_val   euro325   raw_mat       gdp #> ip_tot_cstr                           0.0737   -0.0294    0.0936   -0.0178  #> new_cars                              0.0962    0.0543    0.1054   -0.0432  #> orders                                0.0760   -0.0896    0.0054   -0.0163  #> ret_turnover_defl                    -0.0145    0.0140    0.0392    0.0624  #> ecs_ec_sent_ind                      -0.0657*  -0.0290   -0.0451   -0.0813* #> pms_pmi                              -0.0426   -0.0365    0.0409   -0.0211  #> urx                                   0.0045    0.0002    0.0336   -0.0020  #> extra_ea_trade_exp_val                0.9693    0.0141   -0.0336    0.0744  #> euro325                               0.0141    0.8026    0.0103   -0.0458  #> raw_mat                              -0.0336    0.0103    0.8897   -0.0561  #> gdp                                   0.0744   -0.0458   -0.0561    0.3798  #> empl                                 -0.0301    0.0173    0.0022   -0.0311  #> capacity                             -0.0421   -0.0023   -0.2376*   0.1283* #> gdp_us                               -0.0775    0.0616   -0.0399    0.0510  #>                             empl  capacity    gdp_us #> ip_tot_cstr             -0.0335   -0.0503   -0.1565* #> new_cars                -0.0505   -0.0134    0.0034  #> orders                   0.0229   -0.0238   -0.0046  #> ret_turnover_defl        0.0005   -0.0375   -0.0659  #> ecs_ec_sent_ind          0.0453*  -0.0567   -0.1000* #> pms_pmi                  0.0421   -0.0113   -0.0293  #> urx                      0.0066    0.0380    0.0423  #> extra_ea_trade_exp_val  -0.0301   -0.0421   -0.0775  #> euro325                  0.0173   -0.0023    0.0616  #> raw_mat                  0.0022   -0.2376*  -0.0399  #> gdp                     -0.0311    0.1283*   0.0510  #> empl                     0.1155   -0.0515*  -0.0259  #> capacity                -0.0515*   0.5558    0.1338* #> gdp_us                  -0.0259    0.1338*   0.7093  #>  #> Residual AR(1) Serial Correlation #>            ip_tot_cstr               new_cars                 orders  #>               -0.37927               -0.40846               -0.41429  #>      ret_turnover_defl        ecs_ec_sent_ind                pms_pmi  #>               -0.49173               -0.12364                0.09490  #>                    urx extra_ea_trade_exp_val                euro325  #>                0.01165               -0.52365                0.24452  #>                raw_mat                    gdp                   empl  #>                0.26723                     NA                     NA  #>               capacity                 gdp_us  #>                     NA                     NA  #>  #> Summary of Residual AR(1) Serial Correlations #>    N     Mean   Median      SD      Min     Max #>   10  -0.1723  -0.2515  0.3086  -0.5237  0.2672 #>  #> Goodness of Fit: R-Squared #>            ip_tot_cstr               new_cars                 orders  #>                 0.3874                 0.0057                 0.2173  #>      ret_turnover_defl        ecs_ec_sent_ind                pms_pmi  #>                 0.0115                 0.7463                 0.6833  #>                    urx extra_ea_trade_exp_val                euro325  #>                 0.8347                 0.0307                 0.1974  #>                raw_mat                    gdp                   empl  #>                 0.1103                 0.6202                 0.8845  #>               capacity                 gdp_us  #>                 0.4442                 0.2907  #>  #> Summary of Individual R-Squared's #>    N    Mean  Median      SD     Min     Max #>   14  0.3903  0.3391  0.3146  0.0057  0.8845 plot(dfm_small)  # Factors and data  plot(dfm_small, method = \"all\", type = \"individual\") # Factor estimates  plot(dfm_small, type = \"residual\") # Residuals from factor predictions   # 10 periods ahead forecast plot(predict(dfm_small), xlim = c(300, 370))    ### Medium-Sized Model ---------------------------------  # IC for number of factors IC_medium = ICr(BM14[, BM14_Models$medium]) #> Missing values detected: imputing data with tsnarmimp() with default settings plot(IC_medium)  screeplot(IC_medium)   # I take 3 factors. Now number of lags VARselect(IC_medium$F_pca[, 1:3]) #> $selection #> AIC(n)  HQ(n)  SC(n) FPE(n)  #>      7      2      1      7  #>  #> $criteria #>               1        2        3        4        5        6        7        8 #> AIC(n) 1.539267 1.492781 1.498671 1.509014 1.486111 1.479450 1.468524 1.490378 #> HQ(n)  1.592388 1.585744 1.631474 1.681659 1.698597 1.731776 1.760691 1.822386 #> SC(n)  1.672669 1.726236 1.832177 1.942573 2.019721 2.113112 2.202238 2.324143 #> FPE(n) 4.661186 4.449528 4.475952 4.522752 4.420750 4.391987 4.345059 4.442132 #>               9       10 #> AIC(n) 1.500199 1.534401 #> HQ(n)  1.872048 1.946092 #> SC(n)  2.434016 2.568271 #> FPE(n) 4.487352 4.645257 #>   # Estimating the model with 3 factors and 3 lags dfm_medium = DFM(BM14[, BM14_Models$medium], 3, 3) #> Converged after 26 iterations.  # Inspecting the model summary(dfm_medium) #> Mixed Frequency Dynamic Factor Model #> n = 48, nm = 48, nq = 0, T = 356, r = 3, p = 3 #> %NA = 32.6135, %NAm = NA #>  #> Call:  DFM(X = BM14[, BM14_Models$medium], r = 3, p = 3) #>  #> Summary Statistics of Factors [F] #>       N     Mean   Median      SD       Min     Max #> f1  356  -0.0403   0.4214  2.9848  -17.3578  5.4713 #> f2  356  -0.0109  -0.2687  2.0526   -4.8352  8.2507 #> f3  356  -0.0274   -0.119  1.5727   -6.8234  4.0181 #>  #> Factor Transition Matrix [A] #>       L1.f1    L1.f2   L1.f3    L2.f1     L2.f2   L2.f3    L3.f1   L3.f2 #> f1  0.74619  0.08633 0.28267  0.06055 -0.045219 -0.1494  0.07457 0.05102 #> f2 -0.01289  0.40113 0.04716 -0.09857  0.104393  0.1231 -0.09578 0.24146 #> f3  0.14844 -0.06662 0.41315 -0.01687 -0.001667 -0.1762 -0.14472 0.15933 #>       L3.f3 #> f1  0.06631 #> f2 -0.02438 #> f3  0.15381 #>  #> Factor Covariance Matrix [cov(F)] #>          f1       f2       f3 #> f1  8.9091   0.2889   0.2680  #> f2  0.2889   4.2132   0.0017  #> f3  0.2680   0.0017   2.4733  #>  #> Factor Transition Error Covariance Matrix [Q] #>         u1      u2      u3 #> u1  2.1176  1.1526 -0.3597 #> u2  1.1526  1.9879 -0.4395 #> u3 -0.3597 -0.4395  2.0555 #>  #> Summary of Residual AR(1) Serial Correlations #>    N     Mean   Median      SD      Min     Max #>   39  -0.0879  -0.1043  0.2624  -0.5417  0.4481 #>  #> Summary of Individual R-Squared's #>    N   Mean  Median      SD     Min     Max #>   48  0.381  0.3489  0.2986  0.0073  0.9311 plot(dfm_medium)  # Factors and data  plot(dfm_medium, method = \"all\", type = \"individual\") # Factor estimates  plot(dfm_medium, type = \"residual\") # Residuals from factor predictions   # 10 periods ahead forecast plot(predict(dfm_medium), xlim = c(300, 370))    ### Large Model --------------------------------- # \\donttest{ # IC for number of factors IC_large = ICr(BM14) #> Missing values detected: imputing data with tsnarmimp() with default settings plot(IC_large)  screeplot(IC_large)   # I take 6 factors. Now number of lags VARselect(IC_large$F_pca[, 1:6]) #> $selection #> AIC(n)  HQ(n)  SC(n) FPE(n)  #>      6      1      1      6  #>  #> $criteria #>                 1          2          3          4          5          6 #> AIC(n)   6.020768   5.926947   5.883307   5.889824   5.897327   5.845883 #> HQ(n)    6.206692   6.272235   6.387960   6.553841   6.720708   6.828628 #> SC(n)    6.487677   6.794063   7.150631   7.557355   7.965066   8.313830 #> FPE(n) 411.908362 375.087393 359.232802 361.888929 365.116976 347.515300 #>                 7          8          9         10 #> AIC(n)   5.908082   5.963699   5.982969   6.111831 #> HQ(n)    7.050191   7.265172   7.443806   7.732032 #> SC(n)    8.776235   9.232061   9.651538  10.180607 #> FPE(n) 370.862536 393.546431 403.139879 461.355079 #>   # Estimating the model with 6 factors and 3 lags dfm_large = DFM(BM14, 6, 3) #> Converged after 42 iterations.  # Inspecting the model summary(dfm_large) #> Mixed Frequency Dynamic Factor Model #> n = 101, nm = 101, nq = 0, T = 356, r = 6, p = 3 #> %NA = 29.7363, %NAm = NA #>  #> Call:  DFM(X = BM14, r = 6, p = 3) #>  #> Summary Statistics of Factors [F] #>       N     Mean   Median      SD       Min      Max #> f1  356  -0.0128   0.6589  4.8593  -22.6273  12.1396 #> f2  356  -0.1426   0.1953  3.2924  -13.4553  17.0049 #> f3  356  -0.0121   0.0539  2.6158  -10.0501    7.645 #> f4  356   0.0532    0.227  3.0551  -17.2138   10.345 #> f5  356  -0.0526  -0.0474  2.6591  -10.8706  11.5097 #> f6  356  -0.0074  -0.0276  2.3392   -8.0883  15.4214 #>  #> Factor Transition Matrix [A] #>      L1.f1    L1.f2     L1.f3    L1.f4    L1.f5    L1.f6    L2.f1    L2.f2 #> f1  0.4892 -0.27413  0.555373 -0.49350  0.33904 -0.10227 -0.10721  0.04923 #> f2 -0.1409  0.42355 -0.119072 -0.09760  0.11595  0.14366  0.19016 -0.06640 #> f3  0.2769  0.06985  0.394982  0.10002 -0.12723 -0.11881 -0.20734  0.04944 #> f4 -0.2432 -0.03345  0.085401 -0.18619  0.52093 -0.04263  0.01735 -0.17177 #> f5  0.2858  0.01547 -0.008841  0.40969  0.07289  0.01797 -0.01169  0.16386 #> f6 -0.2178  0.12874 -0.113025 -0.03033 -0.09462  0.40510  0.10945 -0.09195 #>       L2.f3    L2.f4    L2.f5    L2.f6     L3.f1    L3.f2     L3.f3     L3.f4 #> f1 -0.23156 -0.14988 -0.06505  0.50861  0.367040 -0.11658  0.070419  0.008798 #> f2  0.07793 -0.07484  0.21098 -0.19913  0.091421  0.22904  0.008526 -0.142987 #> f3 -0.32524  0.23108 -0.07323  0.10170 -0.004843 -0.10569  0.186417  0.121418 #> f4  0.08269 -0.19694  0.05137  0.11849  0.054295 -0.13206 -0.029156  0.100593 #> f5 -0.12568 -0.01248 -0.15211 -0.01158 -0.145431  0.01864  0.038644  0.038082 #> f6  0.11387 -0.08252  0.14040 -0.19996  0.015064  0.05480  0.060205 -0.111405 #>       L3.f5    L3.f6 #> f1  0.13116 -0.02589 #> f2  0.02080  0.17876 #> f3 -0.12427 -0.03180 #> f4 -0.05662  0.06638 #> f5  0.02519 -0.18284 #> f6  0.05736  0.10027 #>  #> Factor Covariance Matrix [cov(F)] #>           f1        f2        f3        f4        f5        f6 #> f1  23.6126   -0.2329    0.1166    4.0970*  -2.4727*  -2.8984* #> f2  -0.2329   10.8399   -1.8458*   0.6389   -1.1282*   2.1751* #> f3   0.1166   -1.8458*   6.8426   -1.6781*   1.6056*  -1.2712* #> f4   4.0970*   0.6389   -1.6781*   9.3339   -4.2441*  -0.0480  #> f5  -2.4727*  -1.1282*   1.6056*  -4.2441*   7.0708   -0.6045  #> f6  -2.8984*   2.1751*  -1.2712*  -0.0480   -0.6045    5.4720  #>  #> Factor Transition Error Covariance Matrix [Q] #>         u1      u2      u3      u4      u5      u6 #> u1  9.4291 -0.3199 -1.3015  2.2611 -2.0748  0.0669 #> u2 -0.3199  5.3107  0.0049  0.8209 -0.5604 -0.0135 #> u3 -1.3015  0.0049  4.3942 -0.5711  0.4848  0.0342 #> u4  2.2611  0.8209 -0.5711  4.8600 -1.6002  0.1788 #> u5 -2.0748 -0.5604  0.4848 -1.6002  4.4129 -0.0902 #> u6  0.0669 -0.0135  0.0342  0.1788 -0.0902  3.2699 #>  #> Summary of Residual AR(1) Serial Correlations #>    N     Mean   Median      SD      Min     Max #>   92  -0.0706  -0.0965  0.2712  -0.5567  0.6628 #>  #> Summary of Individual R-Squared's #>     N    Mean  Median      SD     Min     Max #>   101  0.4677  0.4352  0.2929  0.0096  0.9984 plot(dfm_large)  # Factors and data  # plot(dfm_large, method = \"all\", type = \"individual\") # Factor estimates plot(dfm_large, type = \"residual\") # Residuals from factor predictions   # 10 periods ahead forecast plot(predict(dfm_large), xlim = c(300, 370))  # }"},{"path":"https://sebkrantz.github.io/dfms/reference/FIS.html","id":null,"dir":"Reference","previous_headings":"","what":"(Fast) Fixed-Interval Smoother (Kalman Smoother) — FIS","title":"(Fast) Fixed-Interval Smoother (Kalman Smoother) — FIS","text":"(Fast) Fixed-Interval Smoother (Kalman Smoother)","code":""},{"path":"https://sebkrantz.github.io/dfms/reference/FIS.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(Fast) Fixed-Interval Smoother (Kalman Smoother) — FIS","text":"","code":"FIS(A, F, F_pred, P, P_pred, F_0 = NULL, P_0 = NULL)"},{"path":"https://sebkrantz.github.io/dfms/reference/FIS.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(Fast) Fixed-Interval Smoother (Kalman Smoother) — FIS","text":"transition matrix (\\(rp \\times rp\\)). F state estimates (\\(T \\times rp\\)). F_pred state predicted estimates (\\(T \\times rp\\)). P variance estimates (\\(rp \\times rp \\times T\\)). P_pred predicted variance estimates (\\(rp \\times rp \\times T\\)). F_0 initial state vector (\\(rp \\times 1\\)) empty (NULL). P_0 initial state covariance (\\(rp \\times rp\\)) empty (NULL).","code":""},{"path":"https://sebkrantz.github.io/dfms/reference/FIS.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"(Fast) Fixed-Interval Smoother (Kalman Smoother) — FIS","text":"Smoothed state covariance estimates, including initial (t = 0) values. F_smooth \\(T \\times rp\\) smoothed state vectors, equal filtered state period \\(T\\). P_smooth \\(rp \\times rp \\times T\\) smoothed state covariance, equal filtered covariance period \\(T\\). F_smooth_0 \\(1 \\times rp\\) initial smoothed state vectors, based F_0. P_smooth_0 \\(rp \\times rp\\) initial smoothed state covariance, based P_0.","code":""},{"path":"https://sebkrantz.github.io/dfms/reference/FIS.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"(Fast) Fixed-Interval Smoother (Kalman Smoother) — FIS","text":"Kalman Smoother given : $$\\textbf{J}_t = \\textbf{P}_t \\textbf{} + inv(\\textbf{P}^{pred}_{t+1})$$ $$\\textbf{F}^{smooth}_t = \\textbf{F}_t + \\textbf{J}_t (\\textbf{F}^{smooth}_{t+1} - \\textbf{F}^{pred}_{t+1})$$ $$\\textbf{P}^{smooth}_t = \\textbf{P}_t + \\textbf{J}_t (\\textbf{P}^{smooth}_{t+1} - \\textbf{P}^{pred}_{t+1}) \\textbf{J}_t'$$ initial smoothed values period t = T set equal filtered values. F_0 P_0 supplied, smoothed initial conditions (t = 0 values) also calculated returned. details see textbook time series Shumway & Stoffer (2017), provide analogous R implementation astsa::Ksmooth0.","code":""},{"path":"https://sebkrantz.github.io/dfms/reference/FIS.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"(Fast) Fixed-Interval Smoother (Kalman Smoother) — FIS","text":"Shumway, R. H., & Stoffer, D. S. (2017). Time Series Analysis Applications: R Examples. Springer. Harvey, . C. (1990). Forecasting, structural time series models Kalman filter.","code":""},{"path":[]},{"path":"https://sebkrantz.github.io/dfms/reference/FIS.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"(Fast) Fixed-Interval Smoother (Kalman Smoother) — FIS","text":"","code":"# See ?SKFS"},{"path":"https://sebkrantz.github.io/dfms/reference/ICr.html","id":null,"dir":"Reference","previous_headings":"","what":"Information Criteria to Determine the Number of Factors (r) — ICr","title":"Information Criteria to Determine the Number of Factors (r) — ICr","text":"Minimizes 3 information criteria proposed Bai Ng (2002) determine optimal number factors r* used approximate factor model. Screeplot can also computed eyeball number factors spirit Onatski (2010).","code":""},{"path":"https://sebkrantz.github.io/dfms/reference/ICr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Information Criteria to Determine the Number of Factors (r) — ICr","text":"","code":"ICr(X, max.r = min(20, ncol(X) - 1))  # S3 method for class 'ICr' print(x, ...)  # S3 method for class 'ICr' plot(x, ...)  # S3 method for class 'ICr' screeplot(x, type = \"pve\", show.grid = TRUE, max.r = 30, ...)"},{"path":"https://sebkrantz.github.io/dfms/reference/ICr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Information Criteria to Determine the Number of Factors (r) — ICr","text":"X T x n numeric data matrix frame stationary time series. max.r integer. maximum number factors IC computed (eigenvalues displayed screeplot). x object type 'ICr'. ... arguments ts.plot plot. type character. Either \"ev\" (eigenvalues), \"pve\" (percent variance explained), \"cum.pve\" (cumulative PVE). Multiple plots can requested. show.grid logical. TRUE shows gridlines plot.","code":""},{"path":"https://sebkrantz.github.io/dfms/reference/ICr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Information Criteria to Determine the Number of Factors (r) — ICr","text":"list 4 elements: F_pca T x n matrix principle component factor estimates. eigenvalues eigenvalues covariance matrix X. IC r.max x 3 'table' containing 3 information criteria Bai Ng (2002), computed values r 1:r.max. r.star vector length 3 containing number factors (r) minimizing information criterion.","code":""},{"path":"https://sebkrantz.github.io/dfms/reference/ICr.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Information Criteria to Determine the Number of Factors (r) — ICr","text":"Following Bai Ng (2002) De Valk et al. (2019), let \\(NSSR(r)\\) normalized sum squared residuals \\(SSR(r) / (n \\times T)\\) r factors estimated using principal components. information criteria can written follows: $$IC_{r1} = \\ln(NSSR(r)) + r\\left(\\frac{n + T}{nT}\\right) + \\ln\\left(\\frac{nT}{n + T}\\right)$$ $$IC_{r2} = \\ln(NSSR(r)) + r\\left(\\frac{n + T}{nT}\\right) + \\ln(\\min(n, T))$$ $$IC_{r3} = \\ln(NSSR(r)) + r\\left(\\frac{\\ln(\\min(n, T))}{\\min(n, T)}\\right)$$ optimal number factors r* corresponds minimum IC. three criteria asymptotically equivalent, may give significantly different results finite samples. penalty \\(IC_{r2}\\) highest finite samples. Screeplot horizontal dashed line shown signifying eigenvalue 1, share variance corresponding 1 divided number eigenvalues.","code":""},{"path":"https://sebkrantz.github.io/dfms/reference/ICr.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Information Criteria to Determine the Number of Factors (r) — ICr","text":"determine number lags (p) factor transition equation, use function vars::VARselect r* principle components (also returned ICr).","code":""},{"path":"https://sebkrantz.github.io/dfms/reference/ICr.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Information Criteria to Determine the Number of Factors (r) — ICr","text":"Bai, J., Ng, S. (2002). Determining Number Factors Approximate Factor Models. Econometrica, 70(1), 191-221. https://doi.org/10.1111/1468-0262.00273. Onatski, . (2010). Determining number factors empirical distribution eigenvalues. Review Economics Statistics, 92(4), 1004-1016. De Valk, S., de Mattos, D., & Ferreira, P. (2019). Nowcasting: R package predicting economic variables using dynamic factor models. R Journal, 11(1), 230-244.","code":""},{"path":"https://sebkrantz.github.io/dfms/reference/ICr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Information Criteria to Determine the Number of Factors (r) — ICr","text":"","code":"library(xts) library(vars)  ics = ICr(diff(BM14_M)) #> Missing values detected: imputing data with tsnarmimp() with default settings print(ics) #> Optimal Number of Factors (r) from Bai and Ng (2002) Criteria #>  #> IC1 IC2 IC3  #>   6   6  20  plot(ics)  screeplot(ics)   # Optimal lag-order with 6 factors chosen VARselect(ics$F_pca[, 1:6]) #> $selection #> AIC(n)  HQ(n)  SC(n) FPE(n)  #>      6      3      1      6  #>  #> $criteria #>                  1          2          3          4          5          6 #> AIC(n)    6.916814   6.660193   6.426226   6.303207   6.254268   6.240250 #> HQ(n)     7.102739   7.005481   6.930879   6.967224   7.077649   7.222994 #> SC(n)     7.383723   7.527309   7.693550   7.970738   8.322007   8.708196 #> FPE(n) 1009.133494 780.867151 618.248189 547.148594 521.734680 515.519358 #>                 7          8          9         10 #> AIC(n)   6.332960   6.342459   6.365012   6.447964 #> HQ(n)    7.475069   7.643931   7.825849   8.068165 #> SC(n)    9.201114   9.610820  10.033580  10.516740 #> FPE(n) 567.198946 574.763323 590.710534 645.677979 #>"},{"path":"https://sebkrantz.github.io/dfms/reference/SKF.html","id":null,"dir":"Reference","previous_headings":"","what":"(Fast) Stationary Kalman Filter — SKF","title":"(Fast) Stationary Kalman Filter — SKF","text":"simple fast C++ implementation Kalman Filter stationary data time-invariant system matrices missing data.","code":""},{"path":"https://sebkrantz.github.io/dfms/reference/SKF.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(Fast) Stationary Kalman Filter — SKF","text":"","code":"SKF(X, A, C, Q, R, F_0, P_0, loglik = FALSE)"},{"path":"https://sebkrantz.github.io/dfms/reference/SKF.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(Fast) Stationary Kalman Filter — SKF","text":"X numeric data matrix (\\(T \\times n\\)). transition matrix (\\(rp \\times rp\\)). C observation matrix (\\(n \\times rp\\)). Q state covariance (\\(rp \\times rp\\)). R observation covariance (\\(n \\times n\\)). F_0 initial state vector (\\(rp \\times 1\\)). P_0 initial state covariance (\\(rp \\times rp\\)). loglik logical. Compute log-likelihood?","code":""},{"path":"https://sebkrantz.github.io/dfms/reference/SKF.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"(Fast) Stationary Kalman Filter — SKF","text":"Predicted filtered state vectors covariances. F \\(T \\times rp\\) filtered state vectors. P \\(rp \\times rp \\times T\\) filtered state covariances. F_pred \\(T \\times rp\\) predicted state vectors. P_pred \\(rp \\times rp \\times T\\) predicted state covariances. loglik value log likelihood.","code":""},{"path":"https://sebkrantz.github.io/dfms/reference/SKF.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"(Fast) Stationary Kalman Filter — SKF","text":"underlying state space model : $$\\textbf{x}_t = \\textbf{C} \\textbf{F}_t + \\textbf{e}_t \\sim N(\\textbf{0}, \\textbf{R})$$ $$\\textbf{F}_t = \\textbf{F}_{t-1} + \\textbf{u}_t \\sim N(\\textbf{0}, \\textbf{Q})$$ \\(x_t\\) X[t, ]. filter first performs time update (prediction) $$\\textbf{F}_t = \\textbf{F}_{t-1}$$ $$\\textbf{P}_t = \\textbf{P}_{t-1}\\textbf{}' + \\textbf{Q}$$ \\(P_t = Cov(F_t)\\). followed measurement update (filtering) $$\\textbf{K}_t = \\textbf{P}_t \\textbf{C}' (\\textbf{C P}_t \\textbf{C}' + \\textbf{R})^{-1}$$ $$\\textbf{F}_t = \\textbf{F}_t + \\textbf{K}_t (\\textbf{x}_t - \\textbf{C F}_t)$$ $$\\textbf{P}_t = \\textbf{P}_t - \\textbf{K}_t\\textbf{C P}_t$$ row data missing measurement update skipped .e. prediction becomes filtered value. log-likelihood computed $$1/2 \\sum_t \\log(|St|)-e_t'S_te_t-n\\log(2\\pi)$$ \\(S_t = (C P_t C' + R)^{-1}\\) \\(e_t = x_t - C F_t\\) prediction error. details see textbook time series Shumway & Stoffer (2017), provide analogous R implementation astsa::Kfilter0. another fast (C-based) implementation also allows time-varying system matrices non-stationary data see FKF::fkf.","code":""},{"path":"https://sebkrantz.github.io/dfms/reference/SKF.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"(Fast) Stationary Kalman Filter — SKF","text":"Shumway, R. H., & Stoffer, D. S. (2017). Time Series Analysis Applications: R Examples. Springer. Harvey, . C. (1990). Forecasting, structural time series models Kalman filter. Hamilton, J. D. (1994). Time Series Analysis. Princeton university press.","code":""},{"path":[]},{"path":"https://sebkrantz.github.io/dfms/reference/SKF.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"(Fast) Stationary Kalman Filter — SKF","text":"","code":"# See ?SKFS"},{"path":"https://sebkrantz.github.io/dfms/reference/SKFS.html","id":null,"dir":"Reference","previous_headings":"","what":"(Fast) Stationary Kalman Filter and Smoother — SKFS","title":"(Fast) Stationary Kalman Filter and Smoother — SKFS","text":"(Fast) Stationary Kalman Filter Smoother","code":""},{"path":"https://sebkrantz.github.io/dfms/reference/SKFS.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(Fast) Stationary Kalman Filter and Smoother — SKFS","text":"","code":"SKFS(X, A, C, Q, R, F_0, P_0, loglik = FALSE)"},{"path":"https://sebkrantz.github.io/dfms/reference/SKFS.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(Fast) Stationary Kalman Filter and Smoother — SKFS","text":"X numeric data matrix (\\(T \\times n\\)). transition matrix (\\(rp \\times rp\\)). C observation matrix (\\(n \\times rp\\)). Q state covariance (\\(rp \\times rp\\)). R observation covariance (\\(n \\times n\\)). F_0 initial state vector (\\(rp \\times 1\\)). P_0 initial state covariance (\\(rp \\times rp\\)). loglik logical. Compute log-likelihood?","code":""},{"path":"https://sebkrantz.github.io/dfms/reference/SKFS.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"(Fast) Stationary Kalman Filter and Smoother — SKFS","text":"results SKF FIS, additionally \\(rp \\times rp \\times T\\) matrix PPm_smooth, equal estimate \\(Cov(F^smooth_t, F^smooth_{t-1} | T)\\) needed EM iterations. See 'Property 6.3: Lag-One Covariance Smoother' Shumway & Stoffer (2017).","code":""},{"path":"https://sebkrantz.github.io/dfms/reference/SKFS.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"(Fast) Stationary Kalman Filter and Smoother — SKFS","text":"Shumway, R. H., & Stoffer, D. S. (2017). Time Series Analysis Applications: R Examples. Springer.","code":""},{"path":[]},{"path":"https://sebkrantz.github.io/dfms/reference/SKFS.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"(Fast) Stationary Kalman Filter and Smoother — SKFS","text":"","code":"library(collapse) #> collapse 2.1.0, see ?`collapse-package` or ?`collapse-documentation` #>  #> Attaching package: ‘collapse’ #> The following object is masked from ‘package:vars’: #>  #>     B #> The following object is masked from ‘package:stats’: #>  #>     D  ## Two-Step factor estimates from monthly BM (2014) data X <- fscale(diff(qM(BM14_M))) # Standardizing as KF has no intercept r <- 5L # 5 Factors p <- 3L # 3 Lags n <- ncol(X)  ## Initializing the Kalman Filter with PCA results X_imp <- tsnarmimp(X)                 # Imputing Data v <- eigen(cov(X_imp))$vectors[, 1:r] # PCA F_pc <- X_imp %*% v                   # Principal component factor estimates C <- cbind(v, matrix(0, n, r*p-r))    # Observation matrix res <- X - tcrossprod(F_pc, v)        # Residuals from static predictions R <- diag(fvar(res))                  # Observation residual covariance var <- .VAR(F_pc, p)                  # VAR(p) A <- rbind(t(var$A), diag(1, r*p-r, r*p)) Q <- matrix(0, r*p, r*p)              # VAR residual matrix Q[1:r, 1:r] <- cov(var$res) F_0 <- var$X[1L, ]                    # Initial factor estimate and covariance P_0 <- ainv(diag((r*p)^2) - kronecker(A,A)) %*% unattrib(Q) dim(P_0) <- c(r*p, r*p)  ## Run standartized data through Kalman Filter and Smoother once kfs_res <- SKFS(X, A, C, Q, R, F_0, P_0, FALSE)  ## Two-step solution is state mean from the Kalman Smoother F_kal <- kfs_res$F_smooth[, 1:r, drop = FALSE] colnames(F_kal) <- paste0(\"f\", 1:r)  ## See that this is equal to the Two-Step estimate by DFM() all.equal(F_kal, DFM(X, r, p, em.method = \"none\", pos.corr = FALSE)$F_2s) #> [1] TRUE  ## Same in two steps using SKF() and FIS() kfs_res2 <- with(SKF(X, A, C, Q, R, F_0, P_0, FALSE), FIS(A, F, F_pred, P, P_pred)) F_kal2 <- kfs_res2$F_smooth[, 1:r, drop = FALSE] colnames(F_kal2) <- paste0(\"f\", 1:r) all.equal(F_kal, F_kal2) #> [1] TRUE  rm(X, r, p, n, X_imp, v, F_pc, C, res, R, var, A, Q, F_0, P_0, kfs_res, F_kal, kfs_res2, F_kal2)"},{"path":"https://sebkrantz.github.io/dfms/reference/ainv.html","id":null,"dir":"Reference","previous_headings":"","what":"Armadillo's Inverse Functions — ainv","title":"Armadillo's Inverse Functions — ainv","text":"Matrix inverse pseudo-inverse Armadillo C++ library.","code":""},{"path":"https://sebkrantz.github.io/dfms/reference/ainv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Armadillo's Inverse Functions — ainv","text":"","code":"ainv(x)  apinv(x)"},{"path":"https://sebkrantz.github.io/dfms/reference/ainv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Armadillo's Inverse Functions — ainv","text":"x numeric matrix, must square ainv.","code":""},{"path":"https://sebkrantz.github.io/dfms/reference/ainv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Armadillo's Inverse Functions — ainv","text":"matrix-inverse pseudo-inverse.","code":""},{"path":"https://sebkrantz.github.io/dfms/reference/ainv.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Armadillo's Inverse Functions — ainv","text":"","code":"ainv(crossprod(diff(EuStockMarkets))) #>                DAX           SMI           CAC          FTSE #> DAX   1.671464e-06 -5.411415e-07 -7.533943e-07 -3.323765e-07 #> SMI  -5.411415e-07  8.147114e-07 -1.596419e-07 -1.770041e-07 #> CAC  -7.533943e-07 -1.596419e-07  2.013654e-06 -4.872422e-07 #> FTSE -3.323765e-07 -1.770041e-07 -4.872422e-07  1.234721e-06"},{"path":"https://sebkrantz.github.io/dfms/reference/as.data.frame.dfm.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Factor Estimates in a Data Frame — as.data.frame.dfm","title":"Extract Factor Estimates in a Data Frame — as.data.frame.dfm","text":"Extract Factor Estimates Data Frame","code":""},{"path":"https://sebkrantz.github.io/dfms/reference/as.data.frame.dfm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Factor Estimates in a Data Frame — as.data.frame.dfm","text":"","code":"# S3 method for class 'dfm' as.data.frame(   x,   ...,   method = \"all\",   pivot = c(\"long\", \"wide.factor\", \"wide.method\", \"wide\", \"t.wide\"),   time = seq_row(x$F_pca),   stringsAsFactors = TRUE )"},{"path":"https://sebkrantz.github.io/dfms/reference/as.data.frame.dfm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract Factor Estimates in a Data Frame — as.data.frame.dfm","text":"x object class 'dfm'. ... used. method character. factor estimates use: \"qml\", \"2s\", \"pca\" (multiple can supplied) \"\" estimates. pivot character. orientation frame: \"long\", \"wide.factor\" \"wide.method\", \"wide\" \"t.wide\". time vector identifying time dimension, NULL omit time variable. stringsAsFactors make factors method factor identifiers. option .data.frame.table.","code":""},{"path":"https://sebkrantz.github.io/dfms/reference/as.data.frame.dfm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract Factor Estimates in a Data Frame — as.data.frame.dfm","text":"data frame factor estimates.","code":""},{"path":"https://sebkrantz.github.io/dfms/reference/as.data.frame.dfm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract Factor Estimates in a Data Frame — as.data.frame.dfm","text":"","code":"# \\donttest{ library(xts) # Fit DFM with 3 factors and 3 lags in the transition equation mod = DFM(diff(BM14_M), r = 3, p = 3) #> Converged after 26 iterations.  # Taking a single estimate: print(head(as.data.frame(mod, method = \"qml\"))) #>   Method Factor Time       Value #> 1    QML     f1    1   3.0487579 #> 2    QML     f1    2  -0.4236117 #> 3    QML     f1    3  -9.4779810 #> 4    QML     f1    4 -10.8844746 #> 5    QML     f1    5  -6.0722144 #> 6    QML     f1    6  -1.0811737 print(head(as.data.frame(mod, method = \"qml\", pivot = \"wide\"))) #>   Time          f1        f2         f3 #> 1    1   3.0487579 -4.371719 -0.1134302 #> 2    2  -0.4236117 -2.190223 -6.3464355 #> 3    3  -9.4779810  3.824410 -2.1678243 #> 4    4 -10.8844746  6.942244  0.4569135 #> 5    5  -6.0722144  1.303051  0.7505150 #> 6    6  -1.0811737 -2.430000  1.5735378  # Adding a proper time variable time = index(BM14_M)[-1L] print(head(as.data.frame(mod, method = \"qml\", time = time))) #>   Method Factor       Time       Value #> 1    QML     f1 1980-02-29   3.0487579 #> 2    QML     f1 1980-03-31  -0.4236117 #> 3    QML     f1 1980-04-30  -9.4779810 #> 4    QML     f1 1980-05-31 -10.8844746 #> 5    QML     f1 1980-06-30  -6.0722144 #> 6    QML     f1 1980-07-31  -1.0811737  # All estimates: different pivoting methods for (pv in c(\"long\", \"wide.factor\", \"wide.method\", \"wide\", \"t.wide\")) {    cat(\"\\npivot = \", pv, \"\\n\")    print(head(as.data.frame(mod, pivot = pv, time = time), 3)) } #>  #> pivot =  long  #>   Method Factor       Time      Value #> 1    PCA     f1 1980-02-29  0.8445713 #> 2    PCA     f1 1980-03-31  0.5259228 #> 3    PCA     f1 1980-04-30 -1.2107116 #>  #> pivot =  wide.factor  #>   Method       Time         f1         f2         f3 #> 1    PCA 1980-02-29  0.8445713 -0.7908231 -1.0289352 #> 2    PCA 1980-03-31  0.5259228 -0.6706157 -3.2251023 #> 3    PCA 1980-04-30 -1.2107116  0.0519631  0.9270935 #>  #> pivot =  wide.method  #>   Factor       Time        PCA    TwoStep        QML #> 1     f1 1980-02-29  0.8445713  0.2903274  3.0487579 #> 2     f1 1980-03-31  0.5259228 -1.1656341 -0.4236117 #> 3     f1 1980-04-30 -1.2107116 -4.9014535 -9.4779810 #>  #> pivot =  wide  #>         Time     f1_PCA     f2_PCA     f3_PCA f1_TwoStep  f2_TwoStep f3_TwoStep #> 1 1980-02-29  0.8445713 -0.7908231 -1.0289352  0.2903274 -1.26492938 -1.6769534 #> 2 1980-03-31  0.5259228 -0.6706157 -3.2251023 -1.1656341 -0.70548999 -5.5720725 #> 3 1980-04-30 -1.2107116  0.0519631  0.9270935 -4.9014535  0.06938226 -0.3158611 #>       f1_QML    f2_QML     f3_QML #> 1  3.0487579 -4.371719 -0.1134302 #> 2 -0.4236117 -2.190223 -6.3464355 #> 3 -9.4779810  3.824410 -2.1678243 #>  #> pivot =  t.wide  #>         Time     f1_PCA f1_TwoStep     f1_QML     f2_PCA  f2_TwoStep    f2_QML #> 1 1980-02-29  0.8445713  0.2903274  3.0487579 -0.7908231 -1.26492938 -4.371719 #> 2 1980-03-31  0.5259228 -1.1656341 -0.4236117 -0.6706157 -0.70548999 -2.190223 #> 3 1980-04-30 -1.2107116 -4.9014535 -9.4779810  0.0519631  0.06938226  3.824410 #>       f3_PCA f3_TwoStep     f3_QML #> 1 -1.0289352 -1.6769534 -0.1134302 #> 2 -3.2251023 -5.5720725 -6.3464355 #> 3  0.9270935 -0.3158611 -2.1678243 # }"},{"path":"https://sebkrantz.github.io/dfms/reference/dot-VAR.html","id":null,"dir":"Reference","previous_headings":"","what":"(Fast) Barebones Vector-Autoregression — .VAR","title":"(Fast) Barebones Vector-Autoregression — .VAR","text":"Quickly estimate VAR(p) model using Armadillo's inverse function.","code":""},{"path":"https://sebkrantz.github.io/dfms/reference/dot-VAR.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(Fast) Barebones Vector-Autoregression — .VAR","text":"","code":".VAR(x, p = 1L)"},{"path":"https://sebkrantz.github.io/dfms/reference/dot-VAR.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(Fast) Barebones Vector-Autoregression — .VAR","text":"x data numeric matrix time series columns - without missing values. p positive integer. lag order VAR.","code":""},{"path":"https://sebkrantz.github.io/dfms/reference/dot-VAR.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"(Fast) Barebones Vector-Autoregression — .VAR","text":"list containing matrices Y = x[-(1:p), ], X contains lags 1 - p x combined column-wise, \\(np \\times n\\) transition matrix, n number series x, VAR residual matrix res = Y - X %*% . list following elements: Y x[-(1:p), ]. X lags 1 - p x combined column-wise. \\(np \\times n\\) transition matrix, n number series x. res VAR residual matrix: Y - X %*% .","code":""},{"path":"https://sebkrantz.github.io/dfms/reference/dot-VAR.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"(Fast) Barebones Vector-Autoregression — .VAR","text":"","code":"var = .VAR(diff(EuStockMarkets), 3) str(var) #> List of 4 #>  $ Y  : num [1:1856, 1:4] -2.88 -7.55 20.14 9.42 -4.7 ... #>   ..- attr(*, \"dimnames\")=List of 2 #>   .. ..$ : NULL #>   .. ..$ : chr [1:4] \"DAX\" \"SMI\" \"CAC\" \"FTSE\" #>  $ X  : num [1:1856, 1:12] 14.53 -2.88 -7.55 20.14 9.42 ... #>   ..- attr(*, \"dimnames\")=List of 2 #>   .. ..$ : NULL #>   .. ..$ : chr [1:12] \"DAX\" \"SMI\" \"CAC\" \"FTSE\" ... #>  $ A  : num [1:12, 1:4] 0.00946 -0.09901 0.04544 0.09475 0.02456 ... #>   ..- attr(*, \"dimnames\")=List of 2 #>   .. ..$ : chr [1:12] \"DAX\" \"SMI\" \"CAC\" \"FTSE\" ... #>   .. ..$ : chr [1:4] \"DAX\" \"SMI\" \"CAC\" \"FTSE\" #>  $ res: num [1:1856, 1:4] -3.39 -5.54 21.51 5.04 -4.91 ... #>   ..- attr(*, \"dimnames\")=List of 2 #>   .. ..$ : NULL #>   .. ..$ : chr [1:4] \"DAX\" \"SMI\" \"CAC\" \"FTSE\" var$A #>               DAX          SMI         CAC         FTSE #> DAX   0.009458998  0.027283428 -0.01093944  0.025490277 #> SMI  -0.099010841 -0.034164357 -0.06651577 -0.094882142 #> CAC   0.045444935  0.037822109  0.03972168 -0.018984419 #> FTSE  0.094745867  0.143551499  0.09179713  0.196154434 #> DAX   0.024559851  0.001705899  0.01593365  0.023913757 #> SMI  -0.021282229  0.018452931 -0.02701831 -0.029297417 #> CAC   0.063422809  0.109479561  0.08450745  0.026931128 #> FTSE -0.076819232 -0.097909530 -0.06820239 -0.022626747 #> DAX  -0.053821302 -0.124261943 -0.01894164 -0.040102476 #> SMI   0.001254346 -0.018010725  0.01927024 -0.001231464 #> CAC   0.049037401  0.100660797 -0.06168014  0.066430851 #> FTSE  0.037908210  0.122676727  0.01831834 -0.004359654 rm(var)"},{"path":"https://sebkrantz.github.io/dfms/reference/em_converged.html","id":null,"dir":"Reference","previous_headings":"","what":"Convergence Test for EM-Algorithm — em_converged","title":"Convergence Test for EM-Algorithm — em_converged","text":"Convergence Test EM-Algorithm","code":""},{"path":"https://sebkrantz.github.io/dfms/reference/em_converged.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convergence Test for EM-Algorithm — em_converged","text":"","code":"em_converged(loglik, previous_loglik, tol = 1e-04, check.increased = FALSE)"},{"path":"https://sebkrantz.github.io/dfms/reference/em_converged.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convergence Test for EM-Algorithm — em_converged","text":"loglik numeric. Current value log-likelihood function. previous_loglik numeric. Value log-likelihood function previous iteration. tol numerical. tolerance test. |LL(t) - LL(t-1)| / avg < tol, avg = (|LL(t)| + |LL(t-1)|)/2, algorithm converged. check.increased logical. Check likelihood increased.","code":""},{"path":"https://sebkrantz.github.io/dfms/reference/em_converged.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convergence Test for EM-Algorithm — em_converged","text":"logical statement indicating whether EM algorithm converged. check.increased = TRUE, vector 2 elements indicating convergence status whether likelihood decreased.","code":""},{"path":"https://sebkrantz.github.io/dfms/reference/em_converged.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convergence Test for EM-Algorithm — em_converged","text":"","code":"em_converged(1001, 1000) #> [1] FALSE em_converged(10001, 10000) #> [1] TRUE em_converged(10001, 10000, check = TRUE) #> converged  decrease  #>      TRUE     FALSE  em_converged(10000, 10001, check = TRUE) #> converged  decrease  #>      TRUE      TRUE"},{"path":"https://sebkrantz.github.io/dfms/reference/plot.dfm.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot DFM — plot.dfm","title":"Plot DFM — plot.dfm","text":"Plot DFM","code":""},{"path":"https://sebkrantz.github.io/dfms/reference/plot.dfm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot DFM — plot.dfm","text":"","code":"# S3 method for class 'dfm' plot(   x,   method = switch(x$em.method, none = \"2s\", \"qml\"),   type = c(\"joint\", \"individual\", \"residual\"),   scale.factors = TRUE,   ... )  # S3 method for class 'dfm' screeplot(x, ...)"},{"path":"https://sebkrantz.github.io/dfms/reference/plot.dfm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot DFM — plot.dfm","text":"x object class 'dfm'. method character. factor estimates use: one \"qml\", \"2s\", \"pca\" \"\" plot estimates. type character. type plot: \"joint\", \"individual\" \"residual\". scale.factors logical. Standardize factor estimates, usually improves plot since factor estimates corresponding greatest PCA eigenvalues tend greater variance data. ... plot.dfm: arguments plot, ts.plot, boxplot, depending type plot. screeplot.dfm: arguments screeplot.ICr.","code":""},{"path":"https://sebkrantz.github.io/dfms/reference/plot.dfm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot DFM — plot.dfm","text":"Nothing.","code":""},{"path":"https://sebkrantz.github.io/dfms/reference/plot.dfm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot DFM — plot.dfm","text":"","code":"# \\donttest{ # Fit DFM with 3 factors and 3 lags in the transition equation mod = DFM(diff(BM14_M), r = 3, p = 3) #> Converged after 26 iterations. plot(mod)  plot(mod, type = \"individual\", method = \"all\")  plot(mod, type = \"residual\")  # }"},{"path":"https://sebkrantz.github.io/dfms/reference/predict.dfm.html","id":null,"dir":"Reference","previous_headings":"","what":"DFM Forecasts — predict.dfm","title":"DFM Forecasts — predict.dfm","text":"function produces h-step ahead forecasts factors data, option also forecast autocorrelated residuals univariate method produce combined forecast.","code":""},{"path":"https://sebkrantz.github.io/dfms/reference/predict.dfm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DFM Forecasts — predict.dfm","text":"","code":"# S3 method for class 'dfm' predict(   object,   h = 10L,   method = switch(object$em.method, none = \"2s\", \"qml\"),   standardized = TRUE,   resFUN = NULL,   resAC = 0.1,   ... )  # S3 method for class 'dfm_forecast' print(x, digits = 4L, ...)  # S3 method for class 'dfm_forecast' plot(   x,   main = paste(x$h, \"Period Ahead DFM Forecast\"),   xlab = \"Time\",   ylab = \"Standardized Data\",   factors = seq_len(ncol(x$F)),   scale.factors = TRUE,   factor.col = rainbow(length(factors)),   factor.lwd = 1.5,   fcst.lty = \"dashed\",   data.col = c(\"grey85\", \"grey65\"),   legend = TRUE,   legend.items = paste0(\"f\", factors),   grid = FALSE,   vline = TRUE,   vline.lty = \"dotted\",   vline.col = \"black\",   ... )  # S3 method for class 'dfm_forecast' as.data.frame(   x,   ...,   use = c(\"factors\", \"data\", \"both\"),   pivot = c(\"long\", \"wide\"),   time = seq_len(nrow(x$F) + x$h),   stringsAsFactors = TRUE )"},{"path":"https://sebkrantz.github.io/dfms/reference/predict.dfm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DFM Forecasts — predict.dfm","text":"object object class 'dfm'. h integer. forecast horizon. method character. factor estimates use: one \"qml\", \"2s\" \"pca\". standardized logical. FALSE return data forecasts original scale. resFUN (optional) function compute univariate forecast residuals. function needs second argument providing forecast horizon (h) return vector forecasts. See Examples. resAC numeric. Threshold residual autocorrelation apply resFUN: residual series AC1 > resAC forecasted. ... used. x object class 'dfm_forecast'. digits integer. number digits print . main, xlab, ylab character. Graphical parameters passed ts.plot. factors integers indicating factors display. Setting NA, NULL 0 omit factor plots. scale.factors logical. Standardize factor estimates, usually improves plot since factor estimates corresponding greatest PCA eigenvalues tend greater variance data. factor.col, factor.lwd graphical parameters affecting colour line width factor estimates plots. See par. fcst.lty integer character giving line type forecasts factors data. See par. data.col character vector length 2 indicating colours historical data forecasts data. Setting NA, NULL \"\" plot data data forecasts. legend logical. TRUE draws legend top-left chart. legend.items character names factors legend. grid logical. TRUE draws grid background plot. vline logical. TRUE draws vertical line deliminating historical data forecasts. vline.lty, vline.col graphical parameters affecting appearance vertical line. See par. use character. forecasts use \"factors\", \"data\" \"\". pivot character. orientation frame: \"long\" \"wide\". time vector identifying time dimension, must length T + h, NULL omit time variable. stringsAsFactors logical. TRUE pivot = \"long\" 'Variable' column created factor. option .data.frame.table.","code":""},{"path":"https://sebkrantz.github.io/dfms/reference/predict.dfm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DFM Forecasts — predict.dfm","text":"list-like object class 'dfm_forecast' following elements: X_fcst \\(h \\times n\\) matrix forecasts variables. F_fcst \\(h \\times r\\) matrix factor forecasts. X \\(T \\times n\\) matrix standardized (scaled centered) data - attributes attached allowing reconstruction original data: F \\(T \\times r\\) matrix factor estimates. method factor estimation method used. anyNA logical indicating whether X contains missing values. h forecast horizon. resid.fc logical indicating whether univariate forecasting function applied residuals. resid.fc.ind indices indicating variables (columns X) residuals forecasted using univariate function. call call object obtained match.call().","code":""},{"path":"https://sebkrantz.github.io/dfms/reference/predict.dfm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DFM Forecasts — predict.dfm","text":"","code":"# \\donttest{ library(xts) library(collapse)  # Fit DFM with 3 factors and 3 lags in the transition equation mod = DFM(diff(BM14_M), r = 3, p = 3) #> Converged after 26 iterations.  # 15 period ahead forecast fc = predict(mod, h = 15) print(fc) #> 15 Step Ahead Forecast from Dynamic Factor Model #>  #> Factor Forecasts #>        f1      f2     f3 #> 1  2.9621  0.6302 0.5202 #> 2  1.9067 -0.5821 0.2764 #> 3  1.2112 -0.3266 0.4844 #> 4  1.5063  0.5408 0.2756 #> 5  0.8329 -0.1443 0.2490 #> 6  0.7555  0.1133 0.1586 #> 7  0.6686  0.2544 0.1433 #> 8  0.3800  0.0005 0.1455 #> 9  0.3847  0.1413 0.0843 #> 10 0.2774  0.1007 0.0806 #> 11 0.1773  0.0345 0.0700 #> 12 0.1725  0.0851 0.0445 #> 13 0.1093  0.0398 0.0419 #> 14 0.0802  0.0305 0.0313 #> 15 0.0701  0.0400 0.0220 #>  #> Series Forecasts #>    ip_total ip_tot_cstr ip_tot_cstr_en ip_constr ip_im_goods ip_capital #> 1    0.6138      0.6115         0.6460    0.1651      0.5878     0.5235 #> 2    0.1876      0.2603         0.1876    0.0448      0.2593     0.1359 #> 3    0.1144      0.1749         0.1158    0.0167      0.1507     0.0915 #> 4    0.3585      0.3407         0.3795    0.0978      0.3256     0.3111 #> 5    0.0995      0.1300         0.1020    0.0207      0.1189     0.0803 #> 6    0.1453      0.1499         0.1525    0.0378      0.1424     0.1235 #> 7    0.1612      0.1534         0.1709    0.0433      0.1450     0.1408 #> 8    0.0581      0.0686         0.0607    0.0122      0.0605     0.0498 #> 9    0.0916      0.0876         0.0971    0.0245      0.0827     0.0799 #> 10   0.0649      0.0632         0.0689    0.0167      0.0582     0.0572 #> 11   0.0343      0.0366         0.0362    0.0078      0.0323     0.0302 #> 12   0.0454      0.0423         0.0483    0.0121      0.0393     0.0402 #> 13   0.0252      0.0251         0.0267    0.0061      0.0223     0.0224 #> 14   0.0187      0.0186         0.0199    0.0045      0.0165     0.0167 #> 15   0.0194      0.0180         0.0207    0.0051      0.0164     0.0174 #>    ip_d_cstr ip_nd_cons  ip_en ip_en_2 ip_manuf ip_metals ip_chemicals #> 1     0.4291     0.3596 0.0360  0.0535   0.6513    0.4595       0.3989 #> 2     0.1012     0.0550 0.0467  0.0330   0.1977    0.2219       0.1742 #> 3     0.0541     0.0275 0.0476  0.0321   0.1225    0.1462       0.0992 #> 4     0.2574     0.2223 0.0129  0.0274   0.3807    0.2501       0.2213 #> 5     0.0566     0.0376 0.0253  0.0190   0.1059    0.1060       0.0793 #> 6     0.0994     0.0818 0.0121  0.0146   0.1543    0.1138       0.0963 #> 7     0.1156     0.1002 0.0066  0.0129   0.1714    0.1122       0.0985 #> 8     0.0360     0.0276 0.0117  0.0098   0.0620    0.0535       0.0403 #> 9     0.0655     0.0567 0.0041  0.0075   0.0974    0.0642       0.0561 #> 10    0.0459     0.0397 0.0042  0.0061   0.0691    0.0463       0.0394 #> 11    0.0228     0.0190 0.0046  0.0046   0.0366    0.0275       0.0217 #> 12    0.0329     0.0290 0.0016  0.0036   0.0483    0.0304       0.0267 #> 13    0.0175     0.0152 0.0023  0.0028   0.0268    0.0183       0.0150 #> 14    0.0131     0.0113 0.0017  0.0021   0.0200    0.0136       0.0111 #> 15    0.0141     0.0126 0.0008  0.0016   0.0207    0.0128       0.0111 #>    ip_electric ip_machinery ip_paper ip_plastic new_cars orders #> 1       0.5388       0.4469   0.3636     0.4959   0.0648 0.3823 #> 2       0.1468       0.1016   0.1557     0.2079   0.0137 0.1856 #> 3       0.0934       0.0656   0.0923     0.1255  -0.0016 0.1265 #> 4       0.3187       0.2689   0.2025     0.2771   0.0393 0.2079 #> 5       0.0830       0.0623   0.0727     0.0987   0.0045 0.0902 #> 6       0.1270       0.1044   0.0880     0.1201   0.0141 0.0952 #> 7       0.1438       0.1216   0.0904     0.1239   0.0171 0.0935 #> 8       0.0505       0.0403   0.0375     0.0515   0.0029 0.0458 #> 9       0.0816       0.0689   0.0515     0.0706   0.0096 0.0535 #> 10      0.0581       0.0490   0.0364     0.0500   0.0061 0.0389 #> 11      0.0305       0.0252   0.0202     0.0279   0.0023 0.0234 #> 12      0.0409       0.0349   0.0246     0.0339   0.0047 0.0254 #> 13      0.0226       0.0191   0.0140     0.0194   0.0020 0.0155 #> 14      0.0169       0.0143   0.0104     0.0143   0.0015 0.0115 #> 15      0.0176       0.0151   0.0103     0.0143   0.0019 0.0107 #>    ret_turnover_defl ecs_ec_sent_ind ecs_ind_conf ecs_ind_order_book #> 1             0.0381          0.5094       0.5126             0.5254 #> 2             0.0203          0.4927       0.5138             0.4636 #> 3             0.0069          0.3269       0.3320             0.3041 #> 4             0.0204          0.2221       0.2196             0.2391 #> 5             0.0069          0.2053       0.2094             0.1945 #> 6             0.0089          0.1398       0.1408             0.1414 #> 7             0.0087          0.0976       0.0957             0.1053 #> 8             0.0029          0.0845       0.0844             0.0817 #> 9             0.0049          0.0572       0.0561             0.0614 #> 10            0.0032          0.0428       0.0416             0.0454 #> 11            0.0015          0.0337       0.0330             0.0338 #> 12            0.0022          0.0224       0.0213             0.0250 #> 13            0.0010          0.0175       0.0168             0.0184 #> 14            0.0008          0.0127       0.0121             0.0133 #> 15            0.0008          0.0084       0.0078             0.0097 #>    ecs_ind_stocks ecs_ind_prod_exp ecs_ind_prod_rec_m ecs_ind_x_orders #> 1         -0.3060           0.3782             0.3546           0.4885 #> 2         -0.3504           0.4192             0.2736           0.4208 #> 3         -0.2248           0.2679             0.1777           0.2742 #> 4         -0.1213           0.1530             0.1701           0.2246 #> 5         -0.1395           0.1672             0.1168           0.1766 #> 6         -0.0863           0.1058             0.0932           0.1308 #> 7         -0.0522           0.0660             0.0753           0.0989 #> 8         -0.0542           0.0653             0.0508           0.0745 #> 9         -0.0309           0.0389             0.0436           0.0575 #> 10        -0.0231           0.0289             0.0319           0.0424 #> 11        -0.0199           0.0244             0.0221           0.0310 #> 12        -0.0106           0.0137             0.0186           0.0237 #> 13        -0.0093           0.0117             0.0127           0.0171 #> 14        -0.0067           0.0083             0.0093           0.0124 #> 15        -0.0036           0.0047             0.0074           0.0092 #>    ecs_ind_empl_exp ecs_cons_conf ecs_cons_sit_over_next_12 ecs_cons_exp_unempl #> 1            0.4212        0.3766                    0.3036             -0.3700 #> 2            0.3662        0.3168                    0.2890             -0.2953 #> 3            0.2435        0.2208                    0.1963             -0.2048 #> 4            0.1929        0.1748                    0.1334             -0.1753 #> 5            0.1553        0.1392                    0.1225             -0.1305 #> 6            0.1134        0.1018                    0.0835             -0.0990 #> 7            0.0852        0.0780                    0.0590             -0.0783 #> 8            0.0659        0.0606                    0.0512             -0.0575 #> 9            0.0496        0.0454                    0.0345             -0.0455 #> 10           0.0369        0.0343                    0.0261             -0.0341 #> 11           0.0274        0.0257                    0.0206             -0.0248 #> 12           0.0204        0.0191                    0.0137             -0.0195 #> 13           0.0150        0.0143                    0.0108             -0.0141 #> 14           0.0109        0.0104                    0.0079             -0.0103 #> 15           0.0080        0.0076                    0.0053             -0.0078 #>    ecs_cons_gen_last_12m ecs_cstr_conf ecs_cstr_order_books ecs_cstr_empl_exp #> 1                 0.3724        0.2204               0.1609            0.1915 #> 2                 0.2827        0.1776               0.1512            0.1344 #> 3                 0.2025        0.1267               0.1048            0.0981 #> 4                 0.1796        0.1040               0.0711            0.0948 #> 5                 0.1285        0.0797               0.0651            0.0627 #> 6                 0.0994        0.0594               0.0444            0.0506 #> 7                 0.0807        0.0466               0.0316            0.0428 #> 8                 0.0580        0.0354               0.0275            0.0291 #> 9                 0.0468        0.0271               0.0185            0.0248 #> 10                0.0354        0.0206               0.0141            0.0187 #> 11                0.0256        0.0153               0.0112            0.0132 #> 12                0.0205        0.0116               0.0074            0.0111 #> 13                0.0148        0.0086               0.0059            0.0078 #> 14                0.0108        0.0063               0.0043            0.0057 #> 15                0.0084        0.0047               0.0029            0.0046 #>    ecs_cstr_prod_recent ecs_ret_tr_conf ecs_ret_tr_bus_sit ecs_ret_tr_stocks #> 1                0.1436          0.1330             0.0860           -0.0238 #> 2                0.1077          0.1385             0.0835           -0.0376 #> 3                0.0735          0.0943             0.0598           -0.0241 #> 4                0.0696          0.0558             0.0374           -0.0071 #> 5                0.0476          0.0580             0.0365           -0.0144 #> 6                0.0379          0.0373             0.0240           -0.0072 #> 7                0.0310          0.0246             0.0167           -0.0029 #> 8                0.0212          0.0237             0.0155           -0.0052 #> 9                0.0180          0.0145             0.0098           -0.0018 #> 10               0.0134          0.0111             0.0076           -0.0014 #> 11               0.0094          0.0092             0.0063           -0.0016 #> 12               0.0078          0.0055             0.0039           -0.0003 #> 13               0.0055          0.0046             0.0033           -0.0006 #> 14               0.0040          0.0033             0.0024           -0.0004 #> 15               0.0032          0.0020             0.0015            0.0000 #>    ecs_ret_tr_exp_bus ecs_ret_tr_empl ecs_serv_conf ecs_serv_empl_exp #> 1              0.1486          0.1285        0.3081            0.2446 #> 2              0.1535          0.0821        0.2812            0.1926 #> 3              0.1013          0.0455        0.1866            0.1280 #> 4              0.0626          0.0656        0.1381            0.1165 #> 5              0.0631          0.0333        0.1182            0.0831 #> 6              0.0413          0.0321        0.0836            0.0647 #> 7              0.0274          0.0287        0.0609            0.0517 #> 8              0.0255          0.0146        0.0494            0.0362 #> 9              0.0161          0.0164        0.0355            0.0300 #> 10             0.0121          0.0114        0.0265            0.0221 #> 11             0.0099          0.0068        0.0202            0.0157 #> 12             0.0061          0.0073        0.0143            0.0128 #> 13             0.0050          0.0043        0.0108            0.0089 #> 14             0.0036          0.0031        0.0078            0.0065 #> 15             0.0022          0.0029        0.0055            0.0051 #>    pms_comp_output pms_comp_empl pms_pmi pms_manuf_empl pms_manuf_output #> 1           0.3414        0.3263  0.3698         0.3868           0.3338 #> 2           0.3230        0.3038  0.3653         0.3547           0.3181 #> 3           0.2231        0.1982  0.2461         0.2406           0.2167 #> 4           0.1504        0.1449  0.1595         0.1730           0.1466 #> 5           0.1385        0.1260  0.1532         0.1511           0.1351 #> 6           0.0941        0.0886  0.1023         0.1056           0.0919 #> 7           0.0668        0.0636  0.0703         0.0766           0.0648 #> 8           0.0583        0.0520  0.0631         0.0636           0.0564 #> 9           0.0391        0.0371  0.0412         0.0447           0.0380 #> 10          0.0298        0.0275  0.0312         0.0337           0.0288 #> 11          0.0236        0.0210  0.0250         0.0260           0.0228 #> 12          0.0157        0.0147  0.0160         0.0181           0.0151 #> 13          0.0125        0.0111  0.0129         0.0139           0.0119 #> 14          0.0090        0.0081  0.0093         0.0101           0.0087 #> 15          0.0061        0.0056  0.0060         0.0070           0.0058 #>    pms_manuf_product pms_serv_out pms_serv_empl pms_serv_new_bus #> 1             0.2106       0.2777        0.2131           0.2985 #> 2             0.2185       0.2625        0.1980           0.2794 #> 3             0.1364       0.1821        0.1248           0.1908 #> 4             0.0886       0.1224        0.0948           0.1322 #> 5             0.0867       0.1129        0.0804           0.1192 #> 6             0.0578       0.0766        0.0574           0.0819 #> 7             0.0382       0.0544        0.0413           0.0586 #> 8             0.0341       0.0476        0.0328           0.0501 #> 9             0.0224       0.0318        0.0241           0.0343 #> 10            0.0163       0.0243        0.0176           0.0259 #> 11            0.0130       0.0193        0.0132           0.0203 #> 12            0.0082       0.0128        0.0095           0.0137 #> 13            0.0065       0.0102        0.0070           0.0108 #> 14            0.0046       0.0074        0.0050           0.0078 #> 15            0.0029       0.0049        0.0035           0.0053 #>    pms_serv_product     urx empl_total empl_tot_xc empl_cstr empl_manuf #> 1            0.1839 -0.3076     0.3256      0.1716    0.4061     0.1826 #> 2            0.1874 -0.1154     0.1055      0.0174    0.2104     0.0241 #> 3            0.1284 -0.0809     0.0916      0.0246    0.1560     0.0290 #> 4            0.0780 -0.1748     0.1887      0.1080    0.2178     0.1136 #> 5            0.0791 -0.0612     0.0656      0.0217    0.1056     0.0247 #> 6            0.0514 -0.0749     0.0799      0.0402    0.1030     0.0430 #> 7            0.0344 -0.0791     0.0866      0.0499    0.0987     0.0524 #> 8            0.0326 -0.0338     0.0388      0.0170    0.0534     0.0184 #> 9            0.0203 -0.0451     0.0494      0.0283    0.0567     0.0297 #> 10           0.0155 -0.0327     0.0368      0.0209    0.0421     0.0220 #> 11           0.0128 -0.0186     0.0217      0.0112    0.0267     0.0118 #> 12           0.0078 -0.0221     0.0248      0.0149    0.0269     0.0156 #> 13           0.0065 -0.0130     0.0152      0.0086    0.0173     0.0090 #> 14           0.0047 -0.0097     0.0113      0.0064    0.0128     0.0067 #> 15           0.0029 -0.0095     0.0109      0.0067    0.0114     0.0070 #>    extra_ea_trade_exp_val intra_ea_trade_exp_val extra_ea_trade_imp_val #> 1                  0.3718                 0.4140                 0.3356 #> 2                  0.1063                 0.1588                 0.1259 #> 3                  0.0579                 0.1018                 0.0675 #> 4                  0.2189                 0.2346                 0.1909 #> 5                  0.0551                 0.0798                 0.0585 #> 6                  0.0870                 0.1001                 0.0797 #> 7                  0.0981                 0.1054                 0.0850 #> 8                  0.0327                 0.0433                 0.0313 #> 9                  0.0556                 0.0601                 0.0483 #> 10                 0.0390                 0.0430                 0.0337 #> 11                 0.0199                 0.0239                 0.0177 #> 12                 0.0276                 0.0292                 0.0234 #> 13                 0.0149                 0.0168                 0.0127 #> 14                 0.0111                 0.0125                 0.0094 #> 15                 0.0118                 0.0124                 0.0098 #>    intra_ea_trade_imp_val  us_ip  us_urx us_empl us_retail_sales #> 1                  0.3489 0.3098 -0.2915  0.2147          0.1911 #> 2                  0.1161 0.2103 -0.1946  0.1654          0.1106 #> 3                  0.0679 0.1335 -0.1266  0.1090          0.0709 #> 4                  0.2017 0.1551 -0.1466  0.1031          0.0999 #> 5                  0.0586 0.0908 -0.0855  0.0713          0.0497 #> 6                  0.0828 0.0796 -0.0750  0.0566          0.0481 #> 7                  0.0904 0.0687 -0.0652  0.0457          0.0445 #> 8                  0.0331 0.0407 -0.0389  0.0312          0.0235 #> 9                  0.0514 0.0396 -0.0376  0.0265          0.0256 #> 10                 0.0362 0.0286 -0.0273  0.0195          0.0184 #> 11                 0.0192 0.0186 -0.0179  0.0136          0.0114 #> 12                 0.0252 0.0175 -0.0167  0.0114          0.0117 #> 13                 0.0139 0.0113 -0.0109  0.0078          0.0073 #> 14                 0.0104 0.0083 -0.0080  0.0057          0.0053 #> 15                 0.0107 0.0071 -0.0068  0.0045          0.0048 #>    us_ip_manuf_exp us_cons_exp us_r3_m us_r10_year      m3   loans ir_long #> 1           0.0674     -0.0084  0.1569      0.1460  0.0353  0.0683  0.1689 #> 2           0.1353      0.0719  0.2166      0.1969 -0.0517  0.0058  0.1302 #> 3           0.0845      0.0388  0.1185      0.1035 -0.0302 -0.0128  0.0997 #> 4           0.0137     -0.0215  0.0541      0.0514  0.0345  0.0434  0.0810 #> 5           0.0499      0.0214  0.0762      0.0677 -0.0145 -0.0005  0.0616 #> 6           0.0218      0.0013  0.0443      0.0406  0.0054  0.0139  0.0458 #> 7           0.0049     -0.0109  0.0214      0.0202  0.0164  0.0186  0.0368 #> 8           0.0168      0.0043  0.0257      0.0224 -0.0017  0.0007  0.0283 #> 9           0.0033     -0.0059  0.0128      0.0120  0.0090  0.0104  0.0214 #> 10          0.0027     -0.0044  0.0085      0.0077  0.0064  0.0063  0.0166 #> 11          0.0047     -0.0007  0.0080      0.0069  0.0018  0.0016  0.0125 #> 12         -0.0005     -0.0044  0.0030      0.0028  0.0057  0.0052  0.0094 #> 13          0.0011     -0.0018  0.0029      0.0025  0.0025  0.0019  0.0071 #> 14          0.0007     -0.0015  0.0019      0.0016  0.0019  0.0014  0.0052 #> 15         -0.0007     -0.0023  0.0004      0.0004  0.0027  0.0021  0.0039 #>    ir_short ir_1_year ir_2_year ir_5_year     eer eer_cpi eer_ppi exr_usd #> 1    0.2798    0.3213    0.2788    0.1809  0.1761  0.1481  0.1986  0.2221 #> 2    0.1613    0.2305    0.2313    0.1791 -0.0193 -0.0312 -0.0045  0.0415 #> 3    0.1027    0.1498    0.1581    0.1098  0.1229  0.1125  0.1320  0.1443 #> 4    0.1465    0.1581    0.1301    0.0780  0.1183  0.1027  0.1297  0.1349 #> 5    0.0723    0.0998    0.1006    0.0708  0.0578  0.0509  0.0641  0.0746 #> 6    0.0704    0.0835    0.0749    0.0490  0.0507  0.0436  0.0564  0.0624 #> 7    0.0653    0.0701    0.0579    0.0336  0.0629  0.0557  0.0679  0.0688 #> 8    0.0342    0.0443    0.0437    0.0280  0.0471  0.0433  0.0499  0.0512 #> 9    0.0374    0.0405    0.0337    0.0197  0.0364  0.0323  0.0393  0.0399 #> 10   0.0269    0.0295    0.0252    0.0142  0.0345  0.0314  0.0366  0.0360 #> 11   0.0166    0.0199    0.0186    0.0109  0.0266  0.0246  0.0279  0.0274 #> 12   0.0172    0.0177    0.0142    0.0074  0.0215  0.0195  0.0228  0.0221 #> 13   0.0106    0.0118    0.0104    0.0055  0.0179  0.0166  0.0187  0.0179 #> 14   0.0078    0.0086    0.0076    0.0040  0.0135  0.0125  0.0141  0.0135 #> 15   0.0071    0.0071    0.0056    0.0027  0.0110  0.0101  0.0115  0.0109 #>    exr_gbp rxr_yen euro50 euro325  sp500  dow_j raw_mat_en raw_mat_oil #> 1  -0.0422  0.2147 0.1997  0.2148 0.2047 0.2084     0.1874      0.2583 #> 2  -0.1312  0.0957 0.2098  0.2262 0.1758 0.1659     0.1901      0.1864 #> 3  -0.0067  0.1389 0.1172  0.1305 0.1191 0.1118     0.0746      0.1495 #> 4   0.0013  0.1182 0.0835  0.0897 0.0942 0.0989     0.0801      0.1266 #> 5  -0.0171  0.0769 0.0776  0.0853 0.0756 0.0720     0.0582      0.0919 #> 6  -0.0090  0.0599 0.0537  0.0581 0.0552 0.0554     0.0471      0.0698 #> 7   0.0068  0.0581 0.0351  0.0379 0.0418 0.0439     0.0317      0.0580 #> 8   0.0058  0.0449 0.0288  0.0322 0.0324 0.0314     0.0179      0.0435 #> 9   0.0039  0.0337 0.0205  0.0222 0.0243 0.0255     0.0183      0.0337 #> 10  0.0074  0.0292 0.0141  0.0155 0.0182 0.0189     0.0105      0.0264 #> 11  0.0063  0.0224 0.0106  0.0120 0.0136 0.0136     0.0059      0.0196 #> 12  0.0053  0.0174 0.0072  0.0079 0.0101 0.0109     0.0059      0.0152 #> 13  0.0053  0.0140 0.0051  0.0058 0.0075 0.0077     0.0027      0.0115 #> 14  0.0041  0.0105 0.0036  0.0041 0.0054 0.0056     0.0018      0.0084 #> 15  0.0036  0.0082 0.0023  0.0026 0.0040 0.0043     0.0015      0.0065 #>    raw_mat_gold raw_mat_oil_fwd raw_mat #> 1        0.0669          0.2083  0.2113 #> 2        0.0036          0.1996  0.2005 #> 3        0.0460          0.1257  0.1123 #> 4        0.0426          0.0913  0.0931 #> 5        0.0227          0.0806  0.0755 #> 6        0.0191          0.0564  0.0558 #> 7        0.0222          0.0397  0.0396 #> 8        0.0168          0.0326  0.0290 #> 9        0.0129          0.0232  0.0230 #> 10       0.0120          0.0169  0.0159 #> 11       0.0092          0.0129  0.0113 #> 12       0.0074          0.0090  0.0087 #> 13       0.0061          0.0067  0.0058 #> 14       0.0046          0.0048  0.0042 #> 15       0.0037          0.0033  0.0030 plot(fc, xlim = c(300, 370))   # Also forecasting autocorrelated residuals with an AR(1) fcfun <- function(x, h) predict(ar(na_rm(x)), n.ahead = h)$pred fcar = predict(mod, resFUN = fcfun, h = 15) plot(fcar, xlim = c(300, 370))   # Retrieving a data frame of the forecasts head(as.data.frame(fcar, pivot = \"wide\")) # Factors #>   Time Forecast          f1        f2         f3 #> 1    1    FALSE   3.0487579 -4.371719 -0.1134302 #> 2    2    FALSE  -0.4236117 -2.190223 -6.3464355 #> 3    3    FALSE  -9.4779810  3.824410 -2.1678243 #> 4    4    FALSE -10.8844746  6.942244  0.4569135 #> 5    5    FALSE  -6.0722144  1.303051  0.7505150 #> 6    6    FALSE  -1.0811737 -2.430000  1.5735378 head(as.data.frame(fcar, use = \"data\"))   # Data #>   Variable Time Forecast Value #> 1 ip_total    1    FALSE    NA #> 2 ip_total    2    FALSE    NA #> 3 ip_total    3    FALSE    NA #> 4 ip_total    4    FALSE    NA #> 5 ip_total    5    FALSE    NA #> 6 ip_total    6    FALSE    NA head(as.data.frame(fcar, use = \"both\"))   # Both #>   Variable Time Forecast       Value #> 1       f1    1    FALSE   3.0487579 #> 2       f1    2    FALSE  -0.4236117 #> 3       f1    3    FALSE  -9.4779810 #> 4       f1    4    FALSE -10.8844746 #> 5       f1    5    FALSE  -6.0722144 #> 6       f1    6    FALSE  -1.0811737 # }"},{"path":"https://sebkrantz.github.io/dfms/reference/residuals.dfm.html","id":null,"dir":"Reference","previous_headings":"","what":"DFM Residuals and Fitted Values — residuals.dfm","title":"DFM Residuals and Fitted Values — residuals.dfm","text":"residuals \\(\\textbf{e}_t = \\textbf{x}_t - \\textbf{C} \\textbf{F}_t\\) fitted values \\(\\textbf{C} \\textbf{F}_t\\) DFM observation equation.","code":""},{"path":"https://sebkrantz.github.io/dfms/reference/residuals.dfm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DFM Residuals and Fitted Values — residuals.dfm","text":"","code":"# S3 method for class 'dfm' residuals(   object,   method = switch(object$em.method, none = \"2s\", \"qml\"),   orig.format = FALSE,   standardized = FALSE,   na.keep = TRUE,   ... )  # S3 method for class 'dfm' fitted(   object,   method = switch(object$em.method, none = \"2s\", \"qml\"),   orig.format = FALSE,   standardized = FALSE,   na.keep = TRUE,   ... )"},{"path":"https://sebkrantz.github.io/dfms/reference/residuals.dfm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DFM Residuals and Fitted Values — residuals.dfm","text":"object object class 'dfm'. method character. factor estimates use: one \"qml\", \"2s\" \"pca\". orig.format logical. TRUE returns residuals/fitted values data format similar X. standardized logical. FALSE put residuals/fitted values original data scale. na.keep logical. TRUE inserts missing values X missing (default TRUE residuals/fitted values defined observed data). FALSE returns raw prediction, can used interpolate data based DFM. residuals, FALSE returns difference prediction initial imputed version X use PCA initialize Kalman Filter. ... used.","code":""},{"path":"https://sebkrantz.github.io/dfms/reference/residuals.dfm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DFM Residuals and Fitted Values — residuals.dfm","text":"matrix DFM residuals fitted values. orig.format = TRUE format may different, e.g. data frame.","code":""},{"path":"https://sebkrantz.github.io/dfms/reference/residuals.dfm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DFM Residuals and Fitted Values — residuals.dfm","text":"","code":"# \\donttest{ library(xts) # Fit DFM with 3 factors and 3 lags in the transition equation mod = DFM(diff(BM14_M), r = 3, p = 3) #> Converged after 26 iterations.  # Residuals head(resid(mod)) #>      ip_total ip_tot_cstr ip_tot_cstr_en ip_constr ip_im_goods ip_capital #> [1,]       NA          NA             NA        NA          NA         NA #> [2,]       NA          NA             NA        NA          NA         NA #> [3,]       NA          NA             NA        NA          NA         NA #> [4,]       NA          NA             NA        NA          NA         NA #> [5,]       NA          NA             NA        NA          NA         NA #> [6,]       NA          NA             NA        NA          NA         NA #>      ip_d_cstr ip_nd_cons ip_en ip_en_2 ip_manuf ip_metals ip_chemicals #> [1,]        NA         NA    NA      NA       NA        NA           NA #> [2,]        NA         NA    NA      NA       NA        NA           NA #> [3,]        NA         NA    NA      NA       NA        NA           NA #> [4,]        NA         NA    NA      NA       NA        NA           NA #> [5,]        NA         NA    NA      NA       NA        NA           NA #> [6,]        NA         NA    NA      NA       NA        NA           NA #>      ip_electric ip_machinery ip_paper ip_plastic new_cars orders #> [1,]          NA           NA       NA         NA       NA     NA #> [2,]          NA           NA       NA         NA       NA     NA #> [3,]          NA           NA       NA         NA       NA     NA #> [4,]          NA           NA       NA         NA       NA     NA #> [5,]          NA           NA       NA         NA       NA     NA #> [6,]          NA           NA       NA         NA       NA     NA #>      ret_turnover_defl ecs_ec_sent_ind ecs_ind_conf ecs_ind_order_book #> [1,]        -3.6576879              NA           NA                 NA #> [2,]         1.7727190              NA           NA                 NA #> [3,]        -1.1002519              NA           NA                 NA #> [4,]        -0.1454957              NA           NA                 NA #> [5,]        -0.5699934              NA           NA                 NA #> [6,]         1.6003246              NA           NA                 NA #>      ecs_ind_stocks ecs_ind_prod_exp ecs_ind_prod_rec_m ecs_ind_x_orders #> [1,]             NA               NA                 NA               NA #> [2,]             NA               NA                 NA               NA #> [3,]             NA               NA                 NA               NA #> [4,]             NA               NA                 NA               NA #> [5,]             NA               NA                 NA               NA #> [6,]             NA               NA                 NA               NA #>      ecs_ind_empl_exp ecs_cons_conf ecs_cons_sit_over_next_12 #> [1,]               NA            NA                        NA #> [2,]               NA            NA                        NA #> [3,]               NA            NA                        NA #> [4,]               NA            NA                        NA #> [5,]               NA            NA                        NA #> [6,]               NA            NA                        NA #>      ecs_cons_exp_unempl ecs_cons_gen_last_12m ecs_cstr_conf #> [1,]                  NA                    NA            NA #> [2,]                  NA                    NA            NA #> [3,]                  NA                    NA            NA #> [4,]                  NA                    NA            NA #> [5,]                  NA                    NA            NA #> [6,]                  NA                    NA            NA #>      ecs_cstr_order_books ecs_cstr_empl_exp ecs_cstr_prod_recent #> [1,]                   NA                NA                   NA #> [2,]                   NA                NA                   NA #> [3,]                   NA                NA                   NA #> [4,]                   NA                NA                   NA #> [5,]                   NA                NA                   NA #> [6,]                   NA                NA                   NA #>      ecs_ret_tr_conf ecs_ret_tr_bus_sit ecs_ret_tr_stocks ecs_ret_tr_exp_bus #> [1,]              NA                 NA                NA                 NA #> [2,]              NA                 NA                NA                 NA #> [3,]              NA                 NA                NA                 NA #> [4,]              NA                 NA                NA                 NA #> [5,]              NA                 NA                NA                 NA #> [6,]              NA                 NA                NA                 NA #>      ecs_ret_tr_empl ecs_serv_conf ecs_serv_empl_exp pms_comp_output #> [1,]              NA            NA                NA              NA #> [2,]              NA            NA                NA              NA #> [3,]              NA            NA                NA              NA #> [4,]              NA            NA                NA              NA #> [5,]              NA            NA                NA              NA #> [6,]              NA            NA                NA              NA #>      pms_comp_empl pms_pmi pms_manuf_empl pms_manuf_output pms_manuf_product #> [1,]            NA      NA             NA               NA                NA #> [2,]            NA      NA             NA               NA                NA #> [3,]            NA      NA             NA               NA                NA #> [4,]            NA      NA             NA               NA                NA #> [5,]            NA      NA             NA               NA                NA #> [6,]            NA      NA             NA               NA                NA #>      pms_serv_out pms_serv_empl pms_serv_new_bus pms_serv_product urx #> [1,]           NA            NA               NA               NA  NA #> [2,]           NA            NA               NA               NA  NA #> [3,]           NA            NA               NA               NA  NA #> [4,]           NA            NA               NA               NA  NA #> [5,]           NA            NA               NA               NA  NA #> [6,]           NA            NA               NA               NA  NA #>      empl_total empl_tot_xc empl_cstr empl_manuf extra_ea_trade_exp_val #> [1,]         NA          NA        NA         NA             190582.858 #> [2,]         NA          NA        NA         NA            -370236.171 #> [3,]         NA          NA        NA         NA             318427.157 #> [4,]         NA          NA        NA         NA               5589.842 #> [5,]         NA          NA        NA         NA             250820.296 #> [6,]         NA          NA        NA         NA             806903.878 #>      intra_ea_trade_exp_val extra_ea_trade_imp_val intra_ea_trade_imp_val #> [1,]               98385.12               594946.9               339686.3 #> [2,]              395717.71              1991220.5             -1795697.5 #> [3,]              972838.03             -1359308.8              1292021.9 #> [4,]              411894.61              1573422.8               527296.4 #> [5,]             1286616.09               674687.8               874156.6 #> [6,]              -19528.59               336060.0               813911.4 #>           us_ip      us_urx     us_empl us_retail_sales us_ip_manuf_exp #> [1,] -0.2772139  0.04836678 -112.456851              NA        5.324118 #> [2,] -0.2644710 -0.02617550 -365.912104              NA       -3.224801 #> [3,] -0.6596791  0.41765710 -299.274986              NA      -15.436624 #> [4,] -0.8140125  0.39418780  -56.356502              NA      -14.602936 #> [5,] -0.4127089 -0.01475864 -209.665861              NA        7.100297 #> [6,] -0.4506433  0.17780271   -0.211103              NA        1.243730 #>      us_cons_exp    us_r3_m us_r10_year          m3 loans ir_long ir_short #> [1,]   -1.122283  0.4861193   1.3943184 -0.08865737    NA      NA       NA #> [2,]  -11.783175  2.1103821   0.1684485 -0.08831266    NA      NA       NA #> [3,]    2.069787 -1.3568310  -0.9003209 -0.31414432    NA      NA       NA #> [4,]    4.281491 -3.6692419  -0.7184414 -0.32873688    NA      NA       NA #> [5,]    8.629724 -1.0978836  -0.1540432 -0.21035360    NA      NA       NA #> [6,]   -0.395273  0.9553125   0.4662679 -0.10306526    NA      NA       NA #>      ir_1_year ir_2_year ir_5_year eer eer_cpi eer_ppi       exr_usd #> [1,]        NA        NA        NA  NA      NA      NA -0.0007111725 #> [2,]        NA        NA        NA  NA      NA      NA  0.0028584538 #> [3,]        NA        NA        NA  NA      NA      NA  0.0016526492 #> [4,]        NA        NA        NA  NA      NA      NA  0.0311893194 #> [5,]        NA        NA        NA  NA      NA      NA  0.0079394990 #> [6,]        NA        NA        NA  NA      NA      NA  0.0058606558 #>           exr_gbp    rxr_yen euro50 euro325         sp500       dow_j #> [1,] -0.005337100   6.959517     NA      NA -11.574282006 -106.400843 #> [2,]  0.010539456  -3.996799     NA      NA  -9.330390459  -67.400779 #> [3,] -0.015277038   2.059095     NA      NA  25.722292255  195.046508 #> [4,] -0.018721359 -15.982046     NA      NA  37.754219317  292.312532 #> [5,] -0.009910865  -9.425426     NA      NA  19.593190651  143.727912 #> [6,] -0.005135135   7.589525     NA      NA  -0.007684972    3.769579 #>      raw_mat_en raw_mat_oil raw_mat_gold raw_mat_oil_fwd   raw_mat #> [1,]  1.3983662  -12.206736    -5.636493              NA -4.886608 #> [2,] -2.1803877    8.016667   -91.962489              NA  1.512282 #> [3,]  0.3466068   12.951518   -36.349745              NA  6.457894 #> [4,]  2.7357011   11.407453   -11.553640              NA  5.039393 #> [5,] -0.4720561    2.670849    81.338684              NA  1.007499 #> [6,]  0.9367513   -5.982752    40.826881              NA -2.203898 plot(resid(mod, orig.format = TRUE)) # this is an xts object   # Fitted values head(fitted(mod)) #>      ip_total ip_tot_cstr ip_tot_cstr_en ip_constr ip_im_goods ip_capital #> [1,]       NA          NA             NA        NA          NA         NA #> [2,]       NA          NA             NA        NA          NA         NA #> [3,]       NA          NA             NA        NA          NA         NA #> [4,]       NA          NA             NA        NA          NA         NA #> [5,]       NA          NA             NA        NA          NA         NA #> [6,]       NA          NA             NA        NA          NA         NA #>      ip_d_cstr ip_nd_cons ip_en ip_en_2 ip_manuf ip_metals ip_chemicals #> [1,]        NA         NA    NA      NA       NA        NA           NA #> [2,]        NA         NA    NA      NA       NA        NA           NA #> [3,]        NA         NA    NA      NA       NA        NA           NA #> [4,]        NA         NA    NA      NA       NA        NA           NA #> [5,]        NA         NA    NA      NA       NA        NA           NA #> [6,]        NA         NA    NA      NA       NA        NA           NA #>      ip_electric ip_machinery ip_paper ip_plastic new_cars orders #> [1,]          NA           NA       NA         NA       NA     NA #> [2,]          NA           NA       NA         NA       NA     NA #> [3,]          NA           NA       NA         NA       NA     NA #> [4,]          NA           NA       NA         NA       NA     NA #> [5,]          NA           NA       NA         NA       NA     NA #> [6,]          NA           NA       NA         NA       NA     NA #>      ret_turnover_defl ecs_ec_sent_ind ecs_ind_conf ecs_ind_order_book #> [1,]      0.0836697879              NA           NA                 NA #> [2,]      0.1650839195              NA           NA                 NA #> [3,]     -0.0168157840              NA           NA                 NA #> [4,]     -0.0718749623              NA           NA                 NA #> [5,]     -0.0367624807              NA           NA                 NA #> [6,]      0.0007295562              NA           NA                 NA #>      ecs_ind_stocks ecs_ind_prod_exp ecs_ind_prod_rec_m ecs_ind_x_orders #> [1,]             NA               NA                 NA               NA #> [2,]             NA               NA                 NA               NA #> [3,]             NA               NA                 NA               NA #> [4,]             NA               NA                 NA               NA #> [5,]             NA               NA                 NA               NA #> [6,]             NA               NA                 NA               NA #>      ecs_ind_empl_exp ecs_cons_conf ecs_cons_sit_over_next_12 #> [1,]               NA            NA                        NA #> [2,]               NA            NA                        NA #> [3,]               NA            NA                        NA #> [4,]               NA            NA                        NA #> [5,]               NA            NA                        NA #> [6,]               NA            NA                        NA #>      ecs_cons_exp_unempl ecs_cons_gen_last_12m ecs_cstr_conf #> [1,]                  NA                    NA            NA #> [2,]                  NA                    NA            NA #> [3,]                  NA                    NA            NA #> [4,]                  NA                    NA            NA #> [5,]                  NA                    NA            NA #> [6,]                  NA                    NA            NA #>      ecs_cstr_order_books ecs_cstr_empl_exp ecs_cstr_prod_recent #> [1,]                   NA                NA                   NA #> [2,]                   NA                NA                   NA #> [3,]                   NA                NA                   NA #> [4,]                   NA                NA                   NA #> [5,]                   NA                NA                   NA #> [6,]                   NA                NA                   NA #>      ecs_ret_tr_conf ecs_ret_tr_bus_sit ecs_ret_tr_stocks ecs_ret_tr_exp_bus #> [1,]              NA                 NA                NA                 NA #> [2,]              NA                 NA                NA                 NA #> [3,]              NA                 NA                NA                 NA #> [4,]              NA                 NA                NA                 NA #> [5,]              NA                 NA                NA                 NA #> [6,]              NA                 NA                NA                 NA #>      ecs_ret_tr_empl ecs_serv_conf ecs_serv_empl_exp pms_comp_output #> [1,]              NA            NA                NA              NA #> [2,]              NA            NA                NA              NA #> [3,]              NA            NA                NA              NA #> [4,]              NA            NA                NA              NA #> [5,]              NA            NA                NA              NA #> [6,]              NA            NA                NA              NA #>      pms_comp_empl pms_pmi pms_manuf_empl pms_manuf_output pms_manuf_product #> [1,]            NA      NA             NA               NA                NA #> [2,]            NA      NA             NA               NA                NA #> [3,]            NA      NA             NA               NA                NA #> [4,]            NA      NA             NA               NA                NA #> [5,]            NA      NA             NA               NA                NA #> [6,]            NA      NA             NA               NA                NA #>      pms_serv_out pms_serv_empl pms_serv_new_bus pms_serv_product urx #> [1,]           NA            NA               NA               NA  NA #> [2,]           NA            NA               NA               NA  NA #> [3,]           NA            NA               NA               NA  NA #> [4,]           NA            NA               NA               NA  NA #> [5,]           NA            NA               NA               NA  NA #> [6,]           NA            NA               NA               NA  NA #>      empl_total empl_tot_xc empl_cstr empl_manuf extra_ea_trade_exp_val #> [1,]         NA          NA        NA         NA              -305115.0 #> [2,]         NA          NA        NA         NA               198378.8 #> [3,]         NA          NA        NA         NA              -475081.2 #> [4,]         NA          NA        NA         NA              -171789.3 #> [5,]         NA          NA        NA         NA              -750484.2 #> [6,]         NA          NA        NA         NA              -813549.6 #>      intra_ea_trade_exp_val extra_ea_trade_imp_val intra_ea_trade_imp_val #> [1,]               44046.37               58442.46             -152565.57 #> [2,]             -130482.95              390811.63               91613.75 #> [3,]             -974592.57             -671158.98             -732883.48 #> [4,]             -713775.15             -652894.14             -476253.32 #> [5,]             -808583.16             -752361.67             -824700.12 #> [6,]             -496135.16             -542413.81             -708081.06 #>            us_ip      us_urx    us_empl us_retail_sales us_ip_manuf_exp #> [1,]  0.32921387 -0.04836678  228.45685              NA        4.675882 #> [2,]  0.09347103  0.02617550   83.91210              NA        1.224801 #> [3,] -0.50632094  0.18234290 -180.72501              NA       -6.563376 #> [4,] -0.61198747  0.20581220 -231.64350              NA       -9.397064 #> [5,] -0.27529107  0.11475864  -53.33414              NA       -3.100297 #> [6,]  0.06064331  0.02219729  114.21110              NA        1.756270 #>      us_cons_exp     us_r3_m us_r10_year        m3 loans ir_long ir_short #> [1,]   1.9222826  0.37201468  0.21814568 0.2019563    NA      NA       NA #> [2,]   1.1831749  0.23425448  0.16586228 0.2536198    NA      NA       NA #> [3,]  -1.9697874 -0.64078803 -0.37539336 0.3837109    NA      NA       NA #> [4,]  -3.3814910 -0.95694856 -0.57346338 0.4475182    NA      NA       NA #> [5,]  -0.9297239 -0.40497354 -0.24929015 0.3269930    NA      NA       NA #> [6,]   0.7952730  0.02676539  0.00336416 0.2450060    NA      NA       NA #>      ir_1_year ir_2_year ir_5_year eer eer_cpi eer_ppi     exr_usd      exr_gbp #> [1,]        NA        NA        NA  NA      NA      NA -0.01243519 -0.007376398 #> [2,]        NA        NA        NA  NA      NA      NA -0.07538607 -0.019812599 #> [3,]        NA        NA        NA  NA      NA      NA -0.01265303  0.007510884 #> [4,]        NA        NA        NA  NA      NA      NA  0.02422289  0.019962715 #> [5,]        NA        NA        NA  NA      NA      NA  0.01281248  0.009991140 #> [6,]        NA        NA        NA  NA      NA      NA  0.01182098  0.003544841 #>         rxr_yen euro50 euro325      sp500      dow_j raw_mat_en raw_mat_oil #> [1,] -0.9472834     NA      NA  16.176270  123.87371  2.2016338    4.306736 #> [2,] -7.7484387     NA      NA  -1.323895   -7.25715  3.5803877   -7.416667 #> [3,] -3.3943497     NA      NA -27.482682 -212.27318 -3.0466068  -12.251518 #> [4,] -0.3183934     NA      NA -32.856037 -250.45063 -5.5357011  -11.207453 #> [5,] -0.2184031     NA      NA -12.872888 -102.06125 -2.7279439   -4.670849 #> [6,]  0.7041374     NA      NA   5.220149   36.15176 -0.5367513    2.082752 #>      raw_mat_gold raw_mat_oil_fwd    raw_mat #> [1,]    -3.050195              NA  3.3856082 #> [2,]   -19.654177              NA  2.1901851 #> [3,]    -1.221445              NA -5.7574272 #> [4,]     9.116140              NA -8.2415268 #> [5,]     5.179530              NA -3.7092994 #> [6,]     4.137405              NA  0.1024977 head(fitted(mod, orig.format = TRUE)) # this is an xts object #>            ip_total ip_tot_cstr ip_tot_cstr_en ip_constr ip_im_goods ip_capital #> 1980-01-31       NA          NA             NA        NA          NA         NA #> 1980-02-29       NA          NA             NA        NA          NA         NA #> 1980-03-31       NA          NA             NA        NA          NA         NA #> 1980-04-30       NA          NA             NA        NA          NA         NA #> 1980-05-31       NA          NA             NA        NA          NA         NA #> 1980-06-30       NA          NA             NA        NA          NA         NA #>            ip_d_cstr ip_nd_cons ip_en ip_en_2 ip_manuf ip_metals ip_chemicals #> 1980-01-31        NA         NA    NA      NA       NA        NA           NA #> 1980-02-29        NA         NA    NA      NA       NA        NA           NA #> 1980-03-31        NA         NA    NA      NA       NA        NA           NA #> 1980-04-30        NA         NA    NA      NA       NA        NA           NA #> 1980-05-31        NA         NA    NA      NA       NA        NA           NA #> 1980-06-30        NA         NA    NA      NA       NA        NA           NA #>            ip_electric ip_machinery ip_paper ip_plastic new_cars orders #> 1980-01-31          NA           NA       NA         NA       NA     NA #> 1980-02-29          NA           NA       NA         NA       NA     NA #> 1980-03-31          NA           NA       NA         NA       NA     NA #> 1980-04-30          NA           NA       NA         NA       NA     NA #> 1980-05-31          NA           NA       NA         NA       NA     NA #> 1980-06-30          NA           NA       NA         NA       NA     NA #>            ret_turnover_defl ecs_ec_sent_ind ecs_ind_conf ecs_ind_order_book #> 1980-01-31                NA              NA           NA                 NA #> 1980-02-29        0.08366979              NA           NA                 NA #> 1980-03-31        0.16508392              NA           NA                 NA #> 1980-04-30       -0.01681578              NA           NA                 NA #> 1980-05-31       -0.07187496              NA           NA                 NA #> 1980-06-30       -0.03676248              NA           NA                 NA #>            ecs_ind_stocks ecs_ind_prod_exp ecs_ind_prod_rec_m ecs_ind_x_orders #> 1980-01-31             NA               NA                 NA               NA #> 1980-02-29             NA               NA                 NA               NA #> 1980-03-31             NA               NA                 NA               NA #> 1980-04-30             NA               NA                 NA               NA #> 1980-05-31             NA               NA                 NA               NA #> 1980-06-30             NA               NA                 NA               NA #>            ecs_ind_empl_exp ecs_cons_conf ecs_cons_sit_over_next_12 #> 1980-01-31               NA            NA                        NA #> 1980-02-29               NA            NA                        NA #> 1980-03-31               NA            NA                        NA #> 1980-04-30               NA            NA                        NA #> 1980-05-31               NA            NA                        NA #> 1980-06-30               NA            NA                        NA #>            ecs_cons_exp_unempl ecs_cons_gen_last_12m ecs_cstr_conf #> 1980-01-31                  NA                    NA            NA #> 1980-02-29                  NA                    NA            NA #> 1980-03-31                  NA                    NA            NA #> 1980-04-30                  NA                    NA            NA #> 1980-05-31                  NA                    NA            NA #> 1980-06-30                  NA                    NA            NA #>            ecs_cstr_order_books ecs_cstr_empl_exp ecs_cstr_prod_recent #> 1980-01-31                   NA                NA                   NA #> 1980-02-29                   NA                NA                   NA #> 1980-03-31                   NA                NA                   NA #> 1980-04-30                   NA                NA                   NA #> 1980-05-31                   NA                NA                   NA #> 1980-06-30                   NA                NA                   NA #>            ecs_ret_tr_conf ecs_ret_tr_bus_sit ecs_ret_tr_stocks #> 1980-01-31              NA                 NA                NA #> 1980-02-29              NA                 NA                NA #> 1980-03-31              NA                 NA                NA #> 1980-04-30              NA                 NA                NA #> 1980-05-31              NA                 NA                NA #> 1980-06-30              NA                 NA                NA #>            ecs_ret_tr_exp_bus ecs_ret_tr_empl ecs_serv_conf ecs_serv_empl_exp #> 1980-01-31                 NA              NA            NA                NA #> 1980-02-29                 NA              NA            NA                NA #> 1980-03-31                 NA              NA            NA                NA #> 1980-04-30                 NA              NA            NA                NA #> 1980-05-31                 NA              NA            NA                NA #> 1980-06-30                 NA              NA            NA                NA #>            pms_comp_output pms_comp_empl pms_pmi pms_manuf_empl #> 1980-01-31              NA            NA      NA             NA #> 1980-02-29              NA            NA      NA             NA #> 1980-03-31              NA            NA      NA             NA #> 1980-04-30              NA            NA      NA             NA #> 1980-05-31              NA            NA      NA             NA #> 1980-06-30              NA            NA      NA             NA #>            pms_manuf_output pms_manuf_product pms_serv_out pms_serv_empl #> 1980-01-31               NA                NA           NA            NA #> 1980-02-29               NA                NA           NA            NA #> 1980-03-31               NA                NA           NA            NA #> 1980-04-30               NA                NA           NA            NA #> 1980-05-31               NA                NA           NA            NA #> 1980-06-30               NA                NA           NA            NA #>            pms_serv_new_bus pms_serv_product urx empl_total empl_tot_xc #> 1980-01-31               NA               NA  NA         NA          NA #> 1980-02-29               NA               NA  NA         NA          NA #> 1980-03-31               NA               NA  NA         NA          NA #> 1980-04-30               NA               NA  NA         NA          NA #> 1980-05-31               NA               NA  NA         NA          NA #> 1980-06-30               NA               NA  NA         NA          NA #>            empl_cstr empl_manuf extra_ea_trade_exp_val intra_ea_trade_exp_val #> 1980-01-31        NA         NA                     NA                     NA #> 1980-02-29        NA         NA              -305115.0               44046.37 #> 1980-03-31        NA         NA               198378.8             -130482.95 #> 1980-04-30        NA         NA              -475081.2             -974592.57 #> 1980-05-31        NA         NA              -171789.3             -713775.15 #> 1980-06-30        NA         NA              -750484.2             -808583.16 #>            extra_ea_trade_imp_val intra_ea_trade_imp_val       us_ip #> 1980-01-31                     NA                     NA          NA #> 1980-02-29               58442.46             -152565.57  0.32921387 #> 1980-03-31              390811.63               91613.75  0.09347103 #> 1980-04-30             -671158.98             -732883.48 -0.50632094 #> 1980-05-31             -652894.14             -476253.32 -0.61198747 #> 1980-06-30             -752361.67             -824700.12 -0.27529107 #>                 us_urx    us_empl us_retail_sales us_ip_manuf_exp us_cons_exp #> 1980-01-31          NA         NA              NA              NA          NA #> 1980-02-29 -0.04836678  228.45685              NA        4.675882   1.9222826 #> 1980-03-31  0.02617550   83.91210              NA        1.224801   1.1831749 #> 1980-04-30  0.18234290 -180.72501              NA       -6.563376  -1.9697874 #> 1980-05-31  0.20581220 -231.64350              NA       -9.397064  -3.3814910 #> 1980-06-30  0.11475864  -53.33414              NA       -3.100297  -0.9297239 #>               us_r3_m us_r10_year        m3 loans ir_long ir_short ir_1_year #> 1980-01-31         NA          NA        NA    NA      NA       NA        NA #> 1980-02-29  0.3720147   0.2181457 0.2019563    NA      NA       NA        NA #> 1980-03-31  0.2342545   0.1658623 0.2536198    NA      NA       NA        NA #> 1980-04-30 -0.6407880  -0.3753934 0.3837109    NA      NA       NA        NA #> 1980-05-31 -0.9569486  -0.5734634 0.4475182    NA      NA       NA        NA #> 1980-06-30 -0.4049735  -0.2492902 0.3269930    NA      NA       NA        NA #>            ir_2_year ir_5_year eer eer_cpi eer_ppi     exr_usd      exr_gbp #> 1980-01-31        NA        NA  NA      NA      NA          NA           NA #> 1980-02-29        NA        NA  NA      NA      NA -0.01243519 -0.007376398 #> 1980-03-31        NA        NA  NA      NA      NA -0.07538607 -0.019812599 #> 1980-04-30        NA        NA  NA      NA      NA -0.01265303  0.007510884 #> 1980-05-31        NA        NA  NA      NA      NA  0.02422289  0.019962715 #> 1980-06-30        NA        NA  NA      NA      NA  0.01281248  0.009991140 #>               rxr_yen euro50 euro325      sp500      dow_j raw_mat_en #> 1980-01-31         NA     NA      NA         NA         NA         NA #> 1980-02-29 -0.9472834     NA      NA  16.176270  123.87371   2.201634 #> 1980-03-31 -7.7484387     NA      NA  -1.323895   -7.25715   3.580388 #> 1980-04-30 -3.3943497     NA      NA -27.482682 -212.27318  -3.046607 #> 1980-05-31 -0.3183934     NA      NA -32.856037 -250.45063  -5.535701 #> 1980-06-30 -0.2184031     NA      NA -12.872888 -102.06125  -2.727944 #>            raw_mat_oil raw_mat_gold raw_mat_oil_fwd   raw_mat #> 1980-01-31          NA           NA              NA        NA #> 1980-02-29    4.306736    -3.050195              NA  3.385608 #> 1980-03-31   -7.416667   -19.654177              NA  2.190185 #> 1980-04-30  -12.251518    -1.221445              NA -5.757427 #> 1980-05-31  -11.207453     9.116140              NA -8.241527 #> 1980-06-30   -4.670849     5.179530              NA -3.709299 # }"},{"path":"https://sebkrantz.github.io/dfms/reference/summary.dfm.html","id":null,"dir":"Reference","previous_headings":"","what":"DFM Summary Methods — summary.dfm","title":"DFM Summary Methods — summary.dfm","text":"Summary print methods class 'dfm'. print.dfm just prints basic model information factor transition matrix \\(\\textbf{}\\), summary.dfm returns system matrices additional residual goodness fit statistics - print method allowing full compact printout.","code":""},{"path":"https://sebkrantz.github.io/dfms/reference/summary.dfm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DFM Summary Methods — summary.dfm","text":"","code":"# S3 method for class 'dfm' print(x, digits = 4L, ...)  # S3 method for class 'dfm' summary(object, method = switch(object$em.method, none = \"2s\", \"qml\"), ...)  # S3 method for class 'dfm_summary' print(x, digits = 4L, compact = sum(x$info[\"n\"] > 15, x$info[\"n\"] > 40), ...)"},{"path":"https://sebkrantz.github.io/dfms/reference/summary.dfm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DFM Summary Methods — summary.dfm","text":"x, object object class 'dfm'. digits integer. number digits print . ... used. method character. factor estimates use: one \"qml\", \"2s\" \"pca\". compact integer. Display compact printout: 0 prints everything, 1 omits observation matrix \\(\\textbf{C}\\) residual covariance matrix cov(resid(model)), 2 omits disaggregated information input data. Sensible default chosen different sizes input dataset limit large printouts.","code":""},{"path":"https://sebkrantz.github.io/dfms/reference/summary.dfm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DFM Summary Methods — summary.dfm","text":"Summary information following dynamic factor model estimation.","code":""},{"path":"https://sebkrantz.github.io/dfms/reference/summary.dfm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DFM Summary Methods — summary.dfm","text":"","code":"mod = DFM(diff(BM14_Q), 2, 3) #> Converged after 26 iterations. print(mod) #> Dynamic Factor Model: n = 9, T = 117, r = 2, p = 3, %NA = 7.5973 #>  #> Factor Transition Matrix [A] #>     L1.f1  L1.f2  L2.f1   L2.f2   L3.f1   L3.f2 #> f1 0.6789 0.2413 -0.034 -0.4640 -0.0012 -0.1988 #> f2 0.0353 0.2270 -0.026  0.0645 -0.0744  0.1802 summary(mod) #> Mixed Frequency Dynamic Factor Model #> n = 9, nm = 9, nq = 0, T = 117, r = 2, p = 3 #> %NA = 7.5973, %NAm = NA #>  #> Call:  DFM(X = diff(BM14_Q), r = 2, p = 3) #>  #> Summary Statistics of Factors [F] #>       N     Mean  Median      SD      Min     Max #> f1  117  -0.0084  0.3469  2.2931  -14.408  3.7167 #> f2  117    0.003  0.0867  0.8146  -2.4636  2.1071 #>  #> Factor Transition Matrix [A] #>      L1.f1  L1.f2    L2.f1    L2.f2     L3.f1   L3.f2 #> f1 0.67890 0.2413 -0.03401 -0.46403 -0.001235 -0.1988 #> f2 0.03533 0.2270 -0.02598  0.06451 -0.074449  0.1802 #>  #> Factor Covariance Matrix [cov(F)] #>          f1       f2 #> f1  5.2584   0.1622  #> f2  0.1622   0.6636  #>  #> Factor Transition Error Covariance Matrix [Q] #>        u1     u2 #> u1 2.7065 0.2039 #> u2 0.2039 0.6618 #>  #> Observation Matrix [C] #>                 f1      f2 #> gdp         0.4094 -0.1237 #> priv_cons   0.2755 -0.4353 #> invest      0.3810 -0.3022 #> export      0.3842  0.4215 #> import      0.3911  0.2106 #> empl        0.3072 -0.3443 #> prductivity 0.2894  0.0222 #> capacity    0.2933  0.0157 #> gdp_us      0.2511  0.1259 #>  #> Observation Error Covariance Matrix [diag(R) - Restricted] #>         gdp   priv_cons      invest      export      import        empl  #>      0.0953      0.4616      0.1685      0.0301      0.1232      0.4160  #> prductivity    capacity      gdp_us  #>      0.2317      0.4737      0.6360  #>  #> Observation Residual Covariance Matrix [cov(resid(DFM))] #>                   gdp priv_cons    invest    export    import      empl #> gdp           0.0670   -0.0046   -0.0096   -0.0038*  -0.0357*  -0.0679* #> priv_cons    -0.0046    0.4173   -0.0735*   0.0059    0.0060   -0.0777* #> invest       -0.0096   -0.0735*   0.1263   -0.0010   -0.0210   -0.0620* #> export       -0.0038*   0.0059   -0.0010    0.0061   -0.0119*   0.0058  #> import       -0.0357*   0.0060   -0.0210   -0.0119*   0.1090    0.0367  #> empl         -0.0679*  -0.0777*  -0.0620*   0.0058    0.0367    0.3816  #> prductivity   0.0683*   0.0273    0.0173   -0.0024   -0.0748*  -0.2119* #> capacity     -0.0470*  -0.0978*  -0.0320   -0.0201*   0.0624*   0.0628  #> gdp_us       -0.0209   -0.0023    0.0045   -0.0095   -0.0252   -0.0236  #>             prductivity  capacity    gdp_us #> gdp             0.0683*  -0.0470*  -0.0209  #> priv_cons       0.0273   -0.0978*  -0.0023  #> invest          0.0173   -0.0320    0.0045  #> export         -0.0024   -0.0201*  -0.0095  #> import         -0.0748*   0.0624*  -0.0252  #> empl           -0.2119*   0.0628   -0.0236  #> prductivity     0.2215   -0.1119*  -0.0496  #> capacity       -0.1119*   0.4666   -0.0059  #> gdp_us         -0.0496   -0.0059    0.6353  #>  #> Residual AR(1) Serial Correlation #>         gdp   priv_cons      invest      export      import        empl  #>   -0.149924   -0.272110   -0.206251   -0.215038   -0.007949    0.434361  #> prductivity    capacity      gdp_us  #>    0.053696    0.091852    0.179658  #>  #> Summary of Residual AR(1) Serial Correlations #>   N     Mean   Median      SD      Min     Max #>   9  -0.0102  -0.0079  0.2282  -0.2721  0.4344 #>  #> Goodness of Fit: R-Squared #>         gdp   priv_cons      invest      export      import        empl  #>      0.9330      0.5827      0.8737      0.9939      0.8910      0.6184  #> prductivity    capacity      gdp_us  #>      0.7785      0.5334      0.3647  #>  #> Summary of Individual R-Squared's #>   N    Mean  Median      SD     Min     Max #>   9  0.7299  0.7785  0.2139  0.3647  0.9939"},{"path":"https://sebkrantz.github.io/dfms/reference/tsnarmimp.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove and Impute Missing Values in a Multivariate Time Series — tsnarmimp","title":"Remove and Impute Missing Values in a Multivariate Time Series — tsnarmimp","text":"function imputes missing values stationary multivariate time series using various methods, removes cases many missing values.","code":""},{"path":"https://sebkrantz.github.io/dfms/reference/tsnarmimp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove and Impute Missing Values in a Multivariate Time Series — tsnarmimp","text":"","code":"tsnarmimp(   X,   max.missing = 0.8,   na.rm.method = c(\"LE\", \"all\"),   na.impute = c(\"median.ma.spline\", \"median.ma\", \"median\", \"rnorm\"),   ma.terms = 3L )"},{"path":"https://sebkrantz.github.io/dfms/reference/tsnarmimp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove and Impute Missing Values in a Multivariate Time Series — tsnarmimp","text":"X T x n numeric data matrix (incl. ts xts objects) data frame stationary time series. max.missing numeric. Proportion series missing case considered missing. na.rm.method character. Method apply concerning missing cases selected max.missing: \"LE\" removes cases beginning end sample, whereas \"\" always removes missing cases. na.impute character. Method impute missing values PCA estimates used initialize EM algorithm. Note data standardized (scaled centered) beforehand. Available options : ma.terms order (2-sided) moving average applied na.impute methods \"median.ma\" \"median.ma.spline\".","code":""},{"path":"https://sebkrantz.github.io/dfms/reference/tsnarmimp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove and Impute Missing Values in a Multivariate Time Series — tsnarmimp","text":"imputed matrix X_imp, attributes: \"missing\" missingness matrix W matching dimensions X_imp. \"rm.rows\" vector indices rows (cases) many missing values removed.","code":""},{"path":"https://sebkrantz.github.io/dfms/reference/tsnarmimp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove and Impute Missing Values in a Multivariate Time Series — tsnarmimp","text":"","code":"library(xts) str(tsnarmimp(BM14_M)) #> An xts object on 1980-01-31 / 2009-09-30 containing:  #>   Data:    double [357, 92] #>   Columns: ip_total, ip_tot_cstr, ip_tot_cstr_en, ip_constr, ip_im_goods ... with 87 more columns #>   Index:   Date [357] (TZ: \"UTC\") #>   xts Attributes: #>     $ missing: logi [1:357, 1:92] TRUE TRUE TRUE TRUE TRUE TRUE ... #>   ..- attr(*, \"dimnames\")=List of 2 #>   .. ..$ : NULL #>   .. ..$ : chr [1:92] \"ip_total\" \"ip_tot_cstr\" \"ip_tot_cstr_en\" \"ip_constr\" ..."},{"path":"https://sebkrantz.github.io/dfms/news/index.html","id":"dfms-030","dir":"Changelog","previous_headings":"","what":"dfms 0.3.0","title":"dfms 0.3.0","text":"Added argument quarterly.vars, enabling mixed-frequency estimation monthly quarterly data following Banbura Modugno (2014). data matrix contain quarterly variables end (monthly ones).","code":""},{"path":"https://sebkrantz.github.io/dfms/news/index.html","id":"dfms-022","dir":"Changelog","previous_headings":"","what":"dfms 0.2.2","title":"dfms 0.2.2","text":"CRAN release: 2024-06-09 Replace Armadillo inv_sympd() Armadillo inv() C++ Kalman Filter improve numerical robustness minor performance cost.","code":""},{"path":"https://sebkrantz.github.io/dfms/news/index.html","id":"dfms-021","dir":"Changelog","previous_headings":"","what":"dfms 0.2.1","title":"dfms 0.2.1","text":"CRAN release: 2023-04-03 Fixed print bug summary.dfm: print method showed model AR(1) errors even though idio.ar1 = FALSE default.","code":""},{"path":"https://sebkrantz.github.io/dfms/news/index.html","id":"dfms-020","dir":"Changelog","previous_headings":"","what":"dfms 0.2.0","title":"dfms 0.2.0","text":"CRAN release: 2023-03-31 Added argument idio.ar1 = TRUE allowing estimation approximate DFM’s AR(1) observation errors. Added small theoretical vignette entitled ‘Dynamic Factor Models: Short Introduction’. vignette lays foundation present future functionality dfms. plan implement features described vignette summer 2023.","code":""},{"path":"https://sebkrantz.github.io/dfms/news/index.html","id":"dfms-015","dir":"Changelog","previous_headings":"","what":"dfms 0.1.5","title":"dfms 0.1.5","text":"Added argument na.keep = TRUE fitted.dfm. Setting na.keep = FALSE allows interpolation data based DFM. Thanks @apoorvalal (#45).","code":""},{"path":"https://sebkrantz.github.io/dfms/news/index.html","id":"dfms-014","dir":"Changelog","previous_headings":"","what":"dfms 0.1.4","title":"dfms 0.1.4","text":"CRAN release: 2023-01-12 Fixed minor bug summary.dfm occurring one factor estimated (basically issue dropping matrix dimensions lead factor summary statistics displayed without names).","code":""},{"path":"https://sebkrantz.github.io/dfms/news/index.html","id":"dfms-013","dir":"Changelog","previous_headings":"","what":"dfms 0.1.3","title":"dfms 0.1.3","text":"CRAN release: 2022-10-12 Implemented minor CRAN comments, changes functionality.","code":""},{"path":"https://sebkrantz.github.io/dfms/news/index.html","id":"dfms-012","dir":"Changelog","previous_headings":"","what":"dfms 0.1.2","title":"dfms 0.1.2","text":"New default em.method = \"auto\", uses \"BM\" data missing values \"DGR\" otherwise. Added vignette providing walkthrough main features.","code":""},{"path":"https://sebkrantz.github.io/dfms/news/index.html","id":"dfms-011","dir":"Changelog","previous_headings":"","what":"dfms 0.1.1","title":"dfms 0.1.1","text":"Renamed package DFM dfms. Lowercase names preferred rOpenSci, also helps distinguish package name main function DFM(). new name inspired vars package.","code":""}]
